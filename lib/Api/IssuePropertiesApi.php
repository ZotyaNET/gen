<?php
/**
 * IssuePropertiesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * IssuePropertiesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IssuePropertiesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bulkDeleteIssueProperty
     *
     * Bulk delete issue property
     *
     * @param  string $property_key The key of the property. (required)
     * @param  \OpenAPI\Client\Model\IssueFilterForBulkPropertyDelete $issue_filter_for_bulk_property_delete issue_filter_for_bulk_property_delete (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkDeleteIssueProperty($property_key, $issue_filter_for_bulk_property_delete)
    {
        $this->bulkDeleteIssuePropertyWithHttpInfo($property_key, $issue_filter_for_bulk_property_delete);
    }

    /**
     * Operation bulkDeleteIssuePropertyWithHttpInfo
     *
     * Bulk delete issue property
     *
     * @param  string $property_key The key of the property. (required)
     * @param  \OpenAPI\Client\Model\IssueFilterForBulkPropertyDelete $issue_filter_for_bulk_property_delete (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkDeleteIssuePropertyWithHttpInfo($property_key, $issue_filter_for_bulk_property_delete)
    {
        $request = $this->bulkDeleteIssuePropertyRequest($property_key, $issue_filter_for_bulk_property_delete);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeleteIssuePropertyAsync
     *
     * Bulk delete issue property
     *
     * @param  string $property_key The key of the property. (required)
     * @param  \OpenAPI\Client\Model\IssueFilterForBulkPropertyDelete $issue_filter_for_bulk_property_delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteIssuePropertyAsync($property_key, $issue_filter_for_bulk_property_delete)
    {
        return $this->bulkDeleteIssuePropertyAsyncWithHttpInfo($property_key, $issue_filter_for_bulk_property_delete)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkDeleteIssuePropertyAsyncWithHttpInfo
     *
     * Bulk delete issue property
     *
     * @param  string $property_key The key of the property. (required)
     * @param  \OpenAPI\Client\Model\IssueFilterForBulkPropertyDelete $issue_filter_for_bulk_property_delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteIssuePropertyAsyncWithHttpInfo($property_key, $issue_filter_for_bulk_property_delete)
    {
        $returnType = '';
        $request = $this->bulkDeleteIssuePropertyRequest($property_key, $issue_filter_for_bulk_property_delete);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeleteIssueProperty'
     *
     * @param  string $property_key The key of the property. (required)
     * @param  \OpenAPI\Client\Model\IssueFilterForBulkPropertyDelete $issue_filter_for_bulk_property_delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkDeleteIssuePropertyRequest($property_key, $issue_filter_for_bulk_property_delete)
    {

        // verify the required parameter 'property_key' is set
        if ($property_key === null || (is_array($property_key) && count($property_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_key when calling bulkDeleteIssueProperty'
            );
        }

        // verify the required parameter 'issue_filter_for_bulk_property_delete' is set
        if ($issue_filter_for_bulk_property_delete === null || (is_array($issue_filter_for_bulk_property_delete) && count($issue_filter_for_bulk_property_delete) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issue_filter_for_bulk_property_delete when calling bulkDeleteIssueProperty'
            );
        }

        $resourcePath = '/rest/api/2/issue/properties/{propertyKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($property_key !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyKey' . '}',
                ObjectSerializer::toPathValue($property_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($issue_filter_for_bulk_property_delete)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($issue_filter_for_bulk_property_delete));
            } else {
                $httpBody = $issue_filter_for_bulk_property_delete;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkSetIssuePropertiesByIssue
     *
     * Bulk set issue properties by issue
     *
     * @param  \OpenAPI\Client\Model\MultiIssueEntityProperties $multi_issue_entity_properties Details of the issue properties to be set or updated. Note that if an issue is not found, it is ignored. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkSetIssuePropertiesByIssue($multi_issue_entity_properties)
    {
        $this->bulkSetIssuePropertiesByIssueWithHttpInfo($multi_issue_entity_properties);
    }

    /**
     * Operation bulkSetIssuePropertiesByIssueWithHttpInfo
     *
     * Bulk set issue properties by issue
     *
     * @param  \OpenAPI\Client\Model\MultiIssueEntityProperties $multi_issue_entity_properties Details of the issue properties to be set or updated. Note that if an issue is not found, it is ignored. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkSetIssuePropertiesByIssueWithHttpInfo($multi_issue_entity_properties)
    {
        $request = $this->bulkSetIssuePropertiesByIssueRequest($multi_issue_entity_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation bulkSetIssuePropertiesByIssueAsync
     *
     * Bulk set issue properties by issue
     *
     * @param  \OpenAPI\Client\Model\MultiIssueEntityProperties $multi_issue_entity_properties Details of the issue properties to be set or updated. Note that if an issue is not found, it is ignored. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkSetIssuePropertiesByIssueAsync($multi_issue_entity_properties)
    {
        return $this->bulkSetIssuePropertiesByIssueAsyncWithHttpInfo($multi_issue_entity_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkSetIssuePropertiesByIssueAsyncWithHttpInfo
     *
     * Bulk set issue properties by issue
     *
     * @param  \OpenAPI\Client\Model\MultiIssueEntityProperties $multi_issue_entity_properties Details of the issue properties to be set or updated. Note that if an issue is not found, it is ignored. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkSetIssuePropertiesByIssueAsyncWithHttpInfo($multi_issue_entity_properties)
    {
        $returnType = '';
        $request = $this->bulkSetIssuePropertiesByIssueRequest($multi_issue_entity_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkSetIssuePropertiesByIssue'
     *
     * @param  \OpenAPI\Client\Model\MultiIssueEntityProperties $multi_issue_entity_properties Details of the issue properties to be set or updated. Note that if an issue is not found, it is ignored. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkSetIssuePropertiesByIssueRequest($multi_issue_entity_properties)
    {

        // verify the required parameter 'multi_issue_entity_properties' is set
        if ($multi_issue_entity_properties === null || (is_array($multi_issue_entity_properties) && count($multi_issue_entity_properties) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $multi_issue_entity_properties when calling bulkSetIssuePropertiesByIssue'
            );
        }

        $resourcePath = '/rest/api/2/issue/properties/multi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($multi_issue_entity_properties)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($multi_issue_entity_properties));
            } else {
                $httpBody = $multi_issue_entity_properties;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkSetIssueProperty
     *
     * Bulk set issue property
     *
     * @param  string $property_key The key of the property. The maximum length is 255 characters. (required)
     * @param  \OpenAPI\Client\Model\BulkIssuePropertyUpdateRequest $bulk_issue_property_update_request bulk_issue_property_update_request (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkSetIssueProperty($property_key, $bulk_issue_property_update_request)
    {
        $this->bulkSetIssuePropertyWithHttpInfo($property_key, $bulk_issue_property_update_request);
    }

    /**
     * Operation bulkSetIssuePropertyWithHttpInfo
     *
     * Bulk set issue property
     *
     * @param  string $property_key The key of the property. The maximum length is 255 characters. (required)
     * @param  \OpenAPI\Client\Model\BulkIssuePropertyUpdateRequest $bulk_issue_property_update_request (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkSetIssuePropertyWithHttpInfo($property_key, $bulk_issue_property_update_request)
    {
        $request = $this->bulkSetIssuePropertyRequest($property_key, $bulk_issue_property_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation bulkSetIssuePropertyAsync
     *
     * Bulk set issue property
     *
     * @param  string $property_key The key of the property. The maximum length is 255 characters. (required)
     * @param  \OpenAPI\Client\Model\BulkIssuePropertyUpdateRequest $bulk_issue_property_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkSetIssuePropertyAsync($property_key, $bulk_issue_property_update_request)
    {
        return $this->bulkSetIssuePropertyAsyncWithHttpInfo($property_key, $bulk_issue_property_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkSetIssuePropertyAsyncWithHttpInfo
     *
     * Bulk set issue property
     *
     * @param  string $property_key The key of the property. The maximum length is 255 characters. (required)
     * @param  \OpenAPI\Client\Model\BulkIssuePropertyUpdateRequest $bulk_issue_property_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkSetIssuePropertyAsyncWithHttpInfo($property_key, $bulk_issue_property_update_request)
    {
        $returnType = '';
        $request = $this->bulkSetIssuePropertyRequest($property_key, $bulk_issue_property_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkSetIssueProperty'
     *
     * @param  string $property_key The key of the property. The maximum length is 255 characters. (required)
     * @param  \OpenAPI\Client\Model\BulkIssuePropertyUpdateRequest $bulk_issue_property_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkSetIssuePropertyRequest($property_key, $bulk_issue_property_update_request)
    {

        // verify the required parameter 'property_key' is set
        if ($property_key === null || (is_array($property_key) && count($property_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_key when calling bulkSetIssueProperty'
            );
        }

        // verify the required parameter 'bulk_issue_property_update_request' is set
        if ($bulk_issue_property_update_request === null || (is_array($bulk_issue_property_update_request) && count($bulk_issue_property_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_issue_property_update_request when calling bulkSetIssueProperty'
            );
        }

        $resourcePath = '/rest/api/2/issue/properties/{propertyKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($property_key !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyKey' . '}',
                ObjectSerializer::toPathValue($property_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($bulk_issue_property_update_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($bulk_issue_property_update_request));
            } else {
                $httpBody = $bulk_issue_property_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkSetIssuesPropertiesList
     *
     * Bulk set issues properties by list
     *
     * @param  \OpenAPI\Client\Model\IssueEntityProperties $issue_entity_properties Issue properties to be set or updated with values. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkSetIssuesPropertiesList($issue_entity_properties)
    {
        $this->bulkSetIssuesPropertiesListWithHttpInfo($issue_entity_properties);
    }

    /**
     * Operation bulkSetIssuesPropertiesListWithHttpInfo
     *
     * Bulk set issues properties by list
     *
     * @param  \OpenAPI\Client\Model\IssueEntityProperties $issue_entity_properties Issue properties to be set or updated with values. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkSetIssuesPropertiesListWithHttpInfo($issue_entity_properties)
    {
        $request = $this->bulkSetIssuesPropertiesListRequest($issue_entity_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation bulkSetIssuesPropertiesListAsync
     *
     * Bulk set issues properties by list
     *
     * @param  \OpenAPI\Client\Model\IssueEntityProperties $issue_entity_properties Issue properties to be set or updated with values. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkSetIssuesPropertiesListAsync($issue_entity_properties)
    {
        return $this->bulkSetIssuesPropertiesListAsyncWithHttpInfo($issue_entity_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkSetIssuesPropertiesListAsyncWithHttpInfo
     *
     * Bulk set issues properties by list
     *
     * @param  \OpenAPI\Client\Model\IssueEntityProperties $issue_entity_properties Issue properties to be set or updated with values. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkSetIssuesPropertiesListAsyncWithHttpInfo($issue_entity_properties)
    {
        $returnType = '';
        $request = $this->bulkSetIssuesPropertiesListRequest($issue_entity_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkSetIssuesPropertiesList'
     *
     * @param  \OpenAPI\Client\Model\IssueEntityProperties $issue_entity_properties Issue properties to be set or updated with values. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkSetIssuesPropertiesListRequest($issue_entity_properties)
    {

        // verify the required parameter 'issue_entity_properties' is set
        if ($issue_entity_properties === null || (is_array($issue_entity_properties) && count($issue_entity_properties) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issue_entity_properties when calling bulkSetIssuesPropertiesList'
            );
        }

        $resourcePath = '/rest/api/2/issue/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($issue_entity_properties)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($issue_entity_properties));
            } else {
                $httpBody = $issue_entity_properties;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIssueProperty
     *
     * Delete issue property
     *
     * @param  string $issue_id_or_key The key or ID of the issue. (required)
     * @param  string $property_key The key of the property. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteIssueProperty($issue_id_or_key, $property_key)
    {
        $this->deleteIssuePropertyWithHttpInfo($issue_id_or_key, $property_key);
    }

    /**
     * Operation deleteIssuePropertyWithHttpInfo
     *
     * Delete issue property
     *
     * @param  string $issue_id_or_key The key or ID of the issue. (required)
     * @param  string $property_key The key of the property. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIssuePropertyWithHttpInfo($issue_id_or_key, $property_key)
    {
        $request = $this->deleteIssuePropertyRequest($issue_id_or_key, $property_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            
            
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIssuePropertyAsync
     *
     * Delete issue property
     *
     * @param  string $issue_id_or_key The key or ID of the issue. (required)
     * @param  string $property_key The key of the property. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIssuePropertyAsync($issue_id_or_key, $property_key)
    {
        return $this->deleteIssuePropertyAsyncWithHttpInfo($issue_id_or_key, $property_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteIssuePropertyAsyncWithHttpInfo
     *
     * Delete issue property
     *
     * @param  string $issue_id_or_key The key or ID of the issue. (required)
     * @param  string $property_key The key of the property. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIssuePropertyAsyncWithHttpInfo($issue_id_or_key, $property_key)
    {
        $returnType = '';
        $request = $this->deleteIssuePropertyRequest($issue_id_or_key, $property_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIssueProperty'
     *
     * @param  string $issue_id_or_key The key or ID of the issue. (required)
     * @param  string $property_key The key of the property. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteIssuePropertyRequest($issue_id_or_key, $property_key)
    {

        // verify the required parameter 'issue_id_or_key' is set
        if ($issue_id_or_key === null || (is_array($issue_id_or_key) && count($issue_id_or_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issue_id_or_key when calling deleteIssueProperty'
            );
        }

        // verify the required parameter 'property_key' is set
        if ($property_key === null || (is_array($property_key) && count($property_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_key when calling deleteIssueProperty'
            );
        }

        $resourcePath = '/rest/api/2/issue/{issueIdOrKey}/properties/{propertyKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($issue_id_or_key !== null) {
            $resourcePath = str_replace(
                '{' . 'issueIdOrKey' . '}',
                ObjectSerializer::toPathValue($issue_id_or_key),
                $resourcePath
            );
        }
        // path params
        if ($property_key !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyKey' . '}',
                ObjectSerializer::toPathValue($property_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIssueProperty
     *
     * Get issue property
     *
     * @param  string $issue_id_or_key The key or ID of the issue. (required)
     * @param  string $property_key The key of the property. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EntityProperty
     */
    public function getIssueProperty($issue_id_or_key, $property_key)
    {
        list($response) = $this->getIssuePropertyWithHttpInfo($issue_id_or_key, $property_key);
        return $response;
    }

    /**
     * Operation getIssuePropertyWithHttpInfo
     *
     * Get issue property
     *
     * @param  string $issue_id_or_key The key or ID of the issue. (required)
     * @param  string $property_key The key of the property. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EntityProperty, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIssuePropertyWithHttpInfo($issue_id_or_key, $property_key)
    {
        $request = $this->getIssuePropertyRequest($issue_id_or_key, $property_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPI\Client\Model\EntityProperty' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EntityProperty' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EntityProperty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
            
            }

            $returnType = '\OpenAPI\Client\Model\EntityProperty';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EntityProperty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
            
            }
            throw $e;
        }
    }

    /**
     * Operation getIssuePropertyAsync
     *
     * Get issue property
     *
     * @param  string $issue_id_or_key The key or ID of the issue. (required)
     * @param  string $property_key The key of the property. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIssuePropertyAsync($issue_id_or_key, $property_key)
    {
        return $this->getIssuePropertyAsyncWithHttpInfo($issue_id_or_key, $property_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIssuePropertyAsyncWithHttpInfo
     *
     * Get issue property
     *
     * @param  string $issue_id_or_key The key or ID of the issue. (required)
     * @param  string $property_key The key of the property. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIssuePropertyAsyncWithHttpInfo($issue_id_or_key, $property_key)
    {
        $returnType = '\OpenAPI\Client\Model\EntityProperty';
        $request = $this->getIssuePropertyRequest($issue_id_or_key, $property_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIssueProperty'
     *
     * @param  string $issue_id_or_key The key or ID of the issue. (required)
     * @param  string $property_key The key of the property. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIssuePropertyRequest($issue_id_or_key, $property_key)
    {

        // verify the required parameter 'issue_id_or_key' is set
        if ($issue_id_or_key === null || (is_array($issue_id_or_key) && count($issue_id_or_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issue_id_or_key when calling getIssueProperty'
            );
        }

        // verify the required parameter 'property_key' is set
        if ($property_key === null || (is_array($property_key) && count($property_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_key when calling getIssueProperty'
            );
        }

        $resourcePath = '/rest/api/2/issue/{issueIdOrKey}/properties/{propertyKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($issue_id_or_key !== null) {
            $resourcePath = str_replace(
                '{' . 'issueIdOrKey' . '}',
                ObjectSerializer::toPathValue($issue_id_or_key),
                $resourcePath
            );
        }
        // path params
        if ($property_key !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyKey' . '}',
                ObjectSerializer::toPathValue($property_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIssuePropertyKeys
     *
     * Get issue property keys
     *
     * @param  string $issue_id_or_key The key or ID of the issue. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyKeys
     */
    public function getIssuePropertyKeys($issue_id_or_key)
    {
        list($response) = $this->getIssuePropertyKeysWithHttpInfo($issue_id_or_key);
        return $response;
    }

    /**
     * Operation getIssuePropertyKeysWithHttpInfo
     *
     * Get issue property keys
     *
     * @param  string $issue_id_or_key The key or ID of the issue. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyKeys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIssuePropertyKeysWithHttpInfo($issue_id_or_key)
    {
        $request = $this->getIssuePropertyKeysRequest($issue_id_or_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPI\Client\Model\PropertyKeys' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PropertyKeys' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertyKeys', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
            }

            $returnType = '\OpenAPI\Client\Model\PropertyKeys';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertyKeys',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
            }
            throw $e;
        }
    }

    /**
     * Operation getIssuePropertyKeysAsync
     *
     * Get issue property keys
     *
     * @param  string $issue_id_or_key The key or ID of the issue. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIssuePropertyKeysAsync($issue_id_or_key)
    {
        return $this->getIssuePropertyKeysAsyncWithHttpInfo($issue_id_or_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIssuePropertyKeysAsyncWithHttpInfo
     *
     * Get issue property keys
     *
     * @param  string $issue_id_or_key The key or ID of the issue. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIssuePropertyKeysAsyncWithHttpInfo($issue_id_or_key)
    {
        $returnType = '\OpenAPI\Client\Model\PropertyKeys';
        $request = $this->getIssuePropertyKeysRequest($issue_id_or_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIssuePropertyKeys'
     *
     * @param  string $issue_id_or_key The key or ID of the issue. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIssuePropertyKeysRequest($issue_id_or_key)
    {

        // verify the required parameter 'issue_id_or_key' is set
        if ($issue_id_or_key === null || (is_array($issue_id_or_key) && count($issue_id_or_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issue_id_or_key when calling getIssuePropertyKeys'
            );
        }

        $resourcePath = '/rest/api/2/issue/{issueIdOrKey}/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($issue_id_or_key !== null) {
            $resourcePath = str_replace(
                '{' . 'issueIdOrKey' . '}',
                ObjectSerializer::toPathValue($issue_id_or_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setIssueProperty
     *
     * Set issue property
     *
     * @param  string $issue_id_or_key The ID or key of the issue. (required)
     * @param  string $property_key The key of the issue property. The maximum length is 255 characters. (required)
     * @param  mixed $body body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|mixed
     */
    public function setIssueProperty($issue_id_or_key, $property_key, $body)
    {
        list($response) = $this->setIssuePropertyWithHttpInfo($issue_id_or_key, $property_key, $body);
        return $response;
    }

    /**
     * Operation setIssuePropertyWithHttpInfo
     *
     * Set issue property
     *
     * @param  string $issue_id_or_key The ID or key of the issue. (required)
     * @param  string $property_key The key of the issue property. The maximum length is 255 characters. (required)
     * @param  mixed $body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function setIssuePropertyWithHttpInfo($issue_id_or_key, $property_key, $body)
    {
        $request = $this->setIssuePropertyRequest($issue_id_or_key, $property_key, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 201:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
            
            
            
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
            
            
            
            }
            throw $e;
        }
    }

    /**
     * Operation setIssuePropertyAsync
     *
     * Set issue property
     *
     * @param  string $issue_id_or_key The ID or key of the issue. (required)
     * @param  string $property_key The key of the issue property. The maximum length is 255 characters. (required)
     * @param  mixed $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setIssuePropertyAsync($issue_id_or_key, $property_key, $body)
    {
        return $this->setIssuePropertyAsyncWithHttpInfo($issue_id_or_key, $property_key, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setIssuePropertyAsyncWithHttpInfo
     *
     * Set issue property
     *
     * @param  string $issue_id_or_key The ID or key of the issue. (required)
     * @param  string $property_key The key of the issue property. The maximum length is 255 characters. (required)
     * @param  mixed $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setIssuePropertyAsyncWithHttpInfo($issue_id_or_key, $property_key, $body)
    {
        $returnType = 'mixed';
        $request = $this->setIssuePropertyRequest($issue_id_or_key, $property_key, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setIssueProperty'
     *
     * @param  string $issue_id_or_key The ID or key of the issue. (required)
     * @param  string $property_key The key of the issue property. The maximum length is 255 characters. (required)
     * @param  mixed $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setIssuePropertyRequest($issue_id_or_key, $property_key, $body)
    {

        // verify the required parameter 'issue_id_or_key' is set
        if ($issue_id_or_key === null || (is_array($issue_id_or_key) && count($issue_id_or_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issue_id_or_key when calling setIssueProperty'
            );
        }

        // verify the required parameter 'property_key' is set
        if ($property_key === null || (is_array($property_key) && count($property_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_key when calling setIssueProperty'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling setIssueProperty'
            );
        }

        $resourcePath = '/rest/api/2/issue/{issueIdOrKey}/properties/{propertyKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($issue_id_or_key !== null) {
            $resourcePath = str_replace(
                '{' . 'issueIdOrKey' . '}',
                ObjectSerializer::toPathValue($issue_id_or_key),
                $resourcePath
            );
        }
        // path params
        if ($property_key !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyKey' . '}',
                ObjectSerializer::toPathValue($property_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
