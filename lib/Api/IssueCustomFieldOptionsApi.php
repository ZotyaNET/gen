<?php
/**
 * IssueCustomFieldOptionsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * IssueCustomFieldOptionsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IssueCustomFieldOptionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createCustomFieldOption
     *
     * Create custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  \OpenAPI\Client\Model\BulkCustomFieldOptionCreateRequest $bulk_custom_field_option_create_request bulk_custom_field_option_create_request (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CustomFieldCreatedContextOptionsList
     */
    public function createCustomFieldOption($field_id, $context_id, $bulk_custom_field_option_create_request)
    {
        list($response) = $this->createCustomFieldOptionWithHttpInfo($field_id, $context_id, $bulk_custom_field_option_create_request);
        return $response;
    }

    /**
     * Operation createCustomFieldOptionWithHttpInfo
     *
     * Create custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  \OpenAPI\Client\Model\BulkCustomFieldOptionCreateRequest $bulk_custom_field_option_create_request (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CustomFieldCreatedContextOptionsList, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCustomFieldOptionWithHttpInfo($field_id, $context_id, $bulk_custom_field_option_create_request)
    {
        $request = $this->createCustomFieldOptionRequest($field_id, $context_id, $bulk_custom_field_option_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPI\Client\Model\CustomFieldCreatedContextOptionsList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CustomFieldCreatedContextOptionsList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CustomFieldCreatedContextOptionsList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
            
            
            
            }

            $returnType = '\OpenAPI\Client\Model\CustomFieldCreatedContextOptionsList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CustomFieldCreatedContextOptionsList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
            
            
            
            }
            throw $e;
        }
    }

    /**
     * Operation createCustomFieldOptionAsync
     *
     * Create custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  \OpenAPI\Client\Model\BulkCustomFieldOptionCreateRequest $bulk_custom_field_option_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomFieldOptionAsync($field_id, $context_id, $bulk_custom_field_option_create_request)
    {
        return $this->createCustomFieldOptionAsyncWithHttpInfo($field_id, $context_id, $bulk_custom_field_option_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCustomFieldOptionAsyncWithHttpInfo
     *
     * Create custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  \OpenAPI\Client\Model\BulkCustomFieldOptionCreateRequest $bulk_custom_field_option_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomFieldOptionAsyncWithHttpInfo($field_id, $context_id, $bulk_custom_field_option_create_request)
    {
        $returnType = '\OpenAPI\Client\Model\CustomFieldCreatedContextOptionsList';
        $request = $this->createCustomFieldOptionRequest($field_id, $context_id, $bulk_custom_field_option_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCustomFieldOption'
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  \OpenAPI\Client\Model\BulkCustomFieldOptionCreateRequest $bulk_custom_field_option_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCustomFieldOptionRequest($field_id, $context_id, $bulk_custom_field_option_create_request)
    {

        // verify the required parameter 'field_id' is set
        if ($field_id === null || (is_array($field_id) && count($field_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_id when calling createCustomFieldOption'
            );
        }

        // verify the required parameter 'context_id' is set
        if ($context_id === null || (is_array($context_id) && count($context_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context_id when calling createCustomFieldOption'
            );
        }

        // verify the required parameter 'bulk_custom_field_option_create_request' is set
        if ($bulk_custom_field_option_create_request === null || (is_array($bulk_custom_field_option_create_request) && count($bulk_custom_field_option_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_custom_field_option_create_request when calling createCustomFieldOption'
            );
        }

        $resourcePath = '/rest/api/2/field/{fieldId}/context/{contextId}/option';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($field_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fieldId' . '}',
                ObjectSerializer::toPathValue($field_id),
                $resourcePath
            );
        }
        // path params
        if ($context_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contextId' . '}',
                ObjectSerializer::toPathValue($context_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($bulk_custom_field_option_create_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($bulk_custom_field_option_create_request));
            } else {
                $httpBody = $bulk_custom_field_option_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCustomFieldOption
     *
     * Delete custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context from which an option should be deleted. (required)
     * @param  int $option_id The ID of the option to delete. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCustomFieldOption($field_id, $context_id, $option_id)
    {
        $this->deleteCustomFieldOptionWithHttpInfo($field_id, $context_id, $option_id);
    }

    /**
     * Operation deleteCustomFieldOptionWithHttpInfo
     *
     * Delete custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context from which an option should be deleted. (required)
     * @param  int $option_id The ID of the option to delete. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomFieldOptionWithHttpInfo($field_id, $context_id, $option_id)
    {
        $request = $this->deleteCustomFieldOptionRequest($field_id, $context_id, $option_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            
            
            
            
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCustomFieldOptionAsync
     *
     * Delete custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context from which an option should be deleted. (required)
     * @param  int $option_id The ID of the option to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomFieldOptionAsync($field_id, $context_id, $option_id)
    {
        return $this->deleteCustomFieldOptionAsyncWithHttpInfo($field_id, $context_id, $option_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCustomFieldOptionAsyncWithHttpInfo
     *
     * Delete custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context from which an option should be deleted. (required)
     * @param  int $option_id The ID of the option to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomFieldOptionAsyncWithHttpInfo($field_id, $context_id, $option_id)
    {
        $returnType = '';
        $request = $this->deleteCustomFieldOptionRequest($field_id, $context_id, $option_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCustomFieldOption'
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context from which an option should be deleted. (required)
     * @param  int $option_id The ID of the option to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCustomFieldOptionRequest($field_id, $context_id, $option_id)
    {

        // verify the required parameter 'field_id' is set
        if ($field_id === null || (is_array($field_id) && count($field_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_id when calling deleteCustomFieldOption'
            );
        }

        // verify the required parameter 'context_id' is set
        if ($context_id === null || (is_array($context_id) && count($context_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context_id when calling deleteCustomFieldOption'
            );
        }

        // verify the required parameter 'option_id' is set
        if ($option_id === null || (is_array($option_id) && count($option_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $option_id when calling deleteCustomFieldOption'
            );
        }

        $resourcePath = '/rest/api/2/field/{fieldId}/context/{contextId}/option/{optionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($field_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fieldId' . '}',
                ObjectSerializer::toPathValue($field_id),
                $resourcePath
            );
        }
        // path params
        if ($context_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contextId' . '}',
                ObjectSerializer::toPathValue($context_id),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionId' . '}',
                ObjectSerializer::toPathValue($option_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomFieldOption
     *
     * Get custom field option
     *
     * @param  string $id The ID of the custom field option. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CustomFieldOption
     */
    public function getCustomFieldOption($id)
    {
        list($response) = $this->getCustomFieldOptionWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getCustomFieldOptionWithHttpInfo
     *
     * Get custom field option
     *
     * @param  string $id The ID of the custom field option. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CustomFieldOption, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomFieldOptionWithHttpInfo($id)
    {
        $request = $this->getCustomFieldOptionRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPI\Client\Model\CustomFieldOption' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CustomFieldOption' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CustomFieldOption', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
            
            }

            $returnType = '\OpenAPI\Client\Model\CustomFieldOption';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CustomFieldOption',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
            
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomFieldOptionAsync
     *
     * Get custom field option
     *
     * @param  string $id The ID of the custom field option. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomFieldOptionAsync($id)
    {
        return $this->getCustomFieldOptionAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomFieldOptionAsyncWithHttpInfo
     *
     * Get custom field option
     *
     * @param  string $id The ID of the custom field option. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomFieldOptionAsyncWithHttpInfo($id)
    {
        $returnType = '\OpenAPI\Client\Model\CustomFieldOption';
        $request = $this->getCustomFieldOptionRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomFieldOption'
     *
     * @param  string $id The ID of the custom field option. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomFieldOptionRequest($id)
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCustomFieldOption'
            );
        }

        $resourcePath = '/rest/api/2/customFieldOption/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOptionsForContext
     *
     * Get custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  int $option_id The ID of the option. (optional)
     * @param  bool $only_options Whether only options are returned. (optional, default to false)
     * @param  int $start_at The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param  int $max_results The maximum number of items to return per page. (optional, default to 100)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PageBeanCustomFieldContextOption
     */
    public function getOptionsForContext($field_id, $context_id, $option_id = null, $only_options = false, $start_at = 0, $max_results = 100)
    {
        list($response) = $this->getOptionsForContextWithHttpInfo($field_id, $context_id, $option_id, $only_options, $start_at, $max_results);
        return $response;
    }

    /**
     * Operation getOptionsForContextWithHttpInfo
     *
     * Get custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  int $option_id The ID of the option. (optional)
     * @param  bool $only_options Whether only options are returned. (optional, default to false)
     * @param  int $start_at The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param  int $max_results The maximum number of items to return per page. (optional, default to 100)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PageBeanCustomFieldContextOption, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOptionsForContextWithHttpInfo($field_id, $context_id, $option_id = null, $only_options = false, $start_at = 0, $max_results = 100)
    {
        $request = $this->getOptionsForContextRequest($field_id, $context_id, $option_id, $only_options, $start_at, $max_results);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPI\Client\Model\PageBeanCustomFieldContextOption' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PageBeanCustomFieldContextOption' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PageBeanCustomFieldContextOption', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
            
            
            
            }

            $returnType = '\OpenAPI\Client\Model\PageBeanCustomFieldContextOption';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PageBeanCustomFieldContextOption',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
            
            
            
            }
            throw $e;
        }
    }

    /**
     * Operation getOptionsForContextAsync
     *
     * Get custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  int $option_id The ID of the option. (optional)
     * @param  bool $only_options Whether only options are returned. (optional, default to false)
     * @param  int $start_at The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param  int $max_results The maximum number of items to return per page. (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOptionsForContextAsync($field_id, $context_id, $option_id = null, $only_options = false, $start_at = 0, $max_results = 100)
    {
        return $this->getOptionsForContextAsyncWithHttpInfo($field_id, $context_id, $option_id, $only_options, $start_at, $max_results)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOptionsForContextAsyncWithHttpInfo
     *
     * Get custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  int $option_id The ID of the option. (optional)
     * @param  bool $only_options Whether only options are returned. (optional, default to false)
     * @param  int $start_at The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param  int $max_results The maximum number of items to return per page. (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOptionsForContextAsyncWithHttpInfo($field_id, $context_id, $option_id = null, $only_options = false, $start_at = 0, $max_results = 100)
    {
        $returnType = '\OpenAPI\Client\Model\PageBeanCustomFieldContextOption';
        $request = $this->getOptionsForContextRequest($field_id, $context_id, $option_id, $only_options, $start_at, $max_results);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOptionsForContext'
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  int $option_id The ID of the option. (optional)
     * @param  bool $only_options Whether only options are returned. (optional, default to false)
     * @param  int $start_at The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param  int $max_results The maximum number of items to return per page. (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOptionsForContextRequest($field_id, $context_id, $option_id = null, $only_options = false, $start_at = 0, $max_results = 100)
    {

        // verify the required parameter 'field_id' is set
        if ($field_id === null || (is_array($field_id) && count($field_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_id when calling getOptionsForContext'
            );
        }

        // verify the required parameter 'context_id' is set
        if ($context_id === null || (is_array($context_id) && count($context_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context_id when calling getOptionsForContext'
            );
        }





        $resourcePath = '/rest/api/2/field/{fieldId}/context/{contextId}/option';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $option_id,
            'optionId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_options,
            'onlyOptions', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_at,
            'startAt', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_results,
            'maxResults', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($field_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fieldId' . '}',
                ObjectSerializer::toPathValue($field_id),
                $resourcePath
            );
        }
        // path params
        if ($context_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contextId' . '}',
                ObjectSerializer::toPathValue($context_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reorderCustomFieldOptions
     *
     * Reorder custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  \OpenAPI\Client\Model\OrderOfCustomFieldOptions $order_of_custom_field_options order_of_custom_field_options (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function reorderCustomFieldOptions($field_id, $context_id, $order_of_custom_field_options)
    {
        list($response) = $this->reorderCustomFieldOptionsWithHttpInfo($field_id, $context_id, $order_of_custom_field_options);
        return $response;
    }

    /**
     * Operation reorderCustomFieldOptionsWithHttpInfo
     *
     * Reorder custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  \OpenAPI\Client\Model\OrderOfCustomFieldOptions $order_of_custom_field_options (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function reorderCustomFieldOptionsWithHttpInfo($field_id, $context_id, $order_of_custom_field_options)
    {
        $request = $this->reorderCustomFieldOptionsRequest($field_id, $context_id, $order_of_custom_field_options);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 204:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
            
            
            
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
            
            
            
            }
            throw $e;
        }
    }

    /**
     * Operation reorderCustomFieldOptionsAsync
     *
     * Reorder custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  \OpenAPI\Client\Model\OrderOfCustomFieldOptions $order_of_custom_field_options (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reorderCustomFieldOptionsAsync($field_id, $context_id, $order_of_custom_field_options)
    {
        return $this->reorderCustomFieldOptionsAsyncWithHttpInfo($field_id, $context_id, $order_of_custom_field_options)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reorderCustomFieldOptionsAsyncWithHttpInfo
     *
     * Reorder custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  \OpenAPI\Client\Model\OrderOfCustomFieldOptions $order_of_custom_field_options (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reorderCustomFieldOptionsAsyncWithHttpInfo($field_id, $context_id, $order_of_custom_field_options)
    {
        $returnType = 'mixed';
        $request = $this->reorderCustomFieldOptionsRequest($field_id, $context_id, $order_of_custom_field_options);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reorderCustomFieldOptions'
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  \OpenAPI\Client\Model\OrderOfCustomFieldOptions $order_of_custom_field_options (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reorderCustomFieldOptionsRequest($field_id, $context_id, $order_of_custom_field_options)
    {

        // verify the required parameter 'field_id' is set
        if ($field_id === null || (is_array($field_id) && count($field_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_id when calling reorderCustomFieldOptions'
            );
        }

        // verify the required parameter 'context_id' is set
        if ($context_id === null || (is_array($context_id) && count($context_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context_id when calling reorderCustomFieldOptions'
            );
        }

        // verify the required parameter 'order_of_custom_field_options' is set
        if ($order_of_custom_field_options === null || (is_array($order_of_custom_field_options) && count($order_of_custom_field_options) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_of_custom_field_options when calling reorderCustomFieldOptions'
            );
        }

        $resourcePath = '/rest/api/2/field/{fieldId}/context/{contextId}/option/move';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($field_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fieldId' . '}',
                ObjectSerializer::toPathValue($field_id),
                $resourcePath
            );
        }
        // path params
        if ($context_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contextId' . '}',
                ObjectSerializer::toPathValue($context_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($order_of_custom_field_options)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($order_of_custom_field_options));
            } else {
                $httpBody = $order_of_custom_field_options;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomFieldOption
     *
     * Update custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  \OpenAPI\Client\Model\BulkCustomFieldOptionUpdateRequest $bulk_custom_field_option_update_request bulk_custom_field_option_update_request (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CustomFieldUpdatedContextOptionsList
     */
    public function updateCustomFieldOption($field_id, $context_id, $bulk_custom_field_option_update_request)
    {
        list($response) = $this->updateCustomFieldOptionWithHttpInfo($field_id, $context_id, $bulk_custom_field_option_update_request);
        return $response;
    }

    /**
     * Operation updateCustomFieldOptionWithHttpInfo
     *
     * Update custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  \OpenAPI\Client\Model\BulkCustomFieldOptionUpdateRequest $bulk_custom_field_option_update_request (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CustomFieldUpdatedContextOptionsList, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomFieldOptionWithHttpInfo($field_id, $context_id, $bulk_custom_field_option_update_request)
    {
        $request = $this->updateCustomFieldOptionRequest($field_id, $context_id, $bulk_custom_field_option_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPI\Client\Model\CustomFieldUpdatedContextOptionsList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CustomFieldUpdatedContextOptionsList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CustomFieldUpdatedContextOptionsList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
            
            
            
            }

            $returnType = '\OpenAPI\Client\Model\CustomFieldUpdatedContextOptionsList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CustomFieldUpdatedContextOptionsList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
            
            
            
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomFieldOptionAsync
     *
     * Update custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  \OpenAPI\Client\Model\BulkCustomFieldOptionUpdateRequest $bulk_custom_field_option_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomFieldOptionAsync($field_id, $context_id, $bulk_custom_field_option_update_request)
    {
        return $this->updateCustomFieldOptionAsyncWithHttpInfo($field_id, $context_id, $bulk_custom_field_option_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomFieldOptionAsyncWithHttpInfo
     *
     * Update custom field options (context)
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  \OpenAPI\Client\Model\BulkCustomFieldOptionUpdateRequest $bulk_custom_field_option_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomFieldOptionAsyncWithHttpInfo($field_id, $context_id, $bulk_custom_field_option_update_request)
    {
        $returnType = '\OpenAPI\Client\Model\CustomFieldUpdatedContextOptionsList';
        $request = $this->updateCustomFieldOptionRequest($field_id, $context_id, $bulk_custom_field_option_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomFieldOption'
     *
     * @param  string $field_id The ID of the custom field. (required)
     * @param  int $context_id The ID of the context. (required)
     * @param  \OpenAPI\Client\Model\BulkCustomFieldOptionUpdateRequest $bulk_custom_field_option_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCustomFieldOptionRequest($field_id, $context_id, $bulk_custom_field_option_update_request)
    {

        // verify the required parameter 'field_id' is set
        if ($field_id === null || (is_array($field_id) && count($field_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_id when calling updateCustomFieldOption'
            );
        }

        // verify the required parameter 'context_id' is set
        if ($context_id === null || (is_array($context_id) && count($context_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context_id when calling updateCustomFieldOption'
            );
        }

        // verify the required parameter 'bulk_custom_field_option_update_request' is set
        if ($bulk_custom_field_option_update_request === null || (is_array($bulk_custom_field_option_update_request) && count($bulk_custom_field_option_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_custom_field_option_update_request when calling updateCustomFieldOption'
            );
        }

        $resourcePath = '/rest/api/2/field/{fieldId}/context/{contextId}/option';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($field_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fieldId' . '}',
                ObjectSerializer::toPathValue($field_id),
                $resourcePath
            );
        }
        // path params
        if ($context_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contextId' . '}',
                ObjectSerializer::toPathValue($context_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($bulk_custom_field_option_update_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($bulk_custom_field_option_update_request));
            } else {
                $httpBody = $bulk_custom_field_option_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
