<?php
/**
 * Comment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Comment Class Doc Comment
 *
 * @category Class
 * @description A comment.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Comment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Comment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'author' => '\OpenAPI\Client\Model\CommentAuthor',
        'body' => 'string',
        'created' => '\DateTime',
        'id' => 'string',
        'jsd_author_can_see_request' => 'bool',
        'jsd_public' => 'bool',
        'properties' => '\OpenAPI\Client\Model\EntityProperty[]',
        'rendered_body' => 'string',
        'self' => 'string',
        'update_author' => '\OpenAPI\Client\Model\CommentUpdateAuthor',
        'updated' => '\DateTime',
        'visibility' => '\OpenAPI\Client\Model\CommentVisibility'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'author' => null,
        'body' => null,
        'created' => 'date-time',
        'id' => null,
        'jsd_author_can_see_request' => null,
        'jsd_public' => null,
        'properties' => null,
        'rendered_body' => null,
        'self' => null,
        'update_author' => null,
        'updated' => 'date-time',
        'visibility' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'author' => false,
		'body' => false,
		'created' => false,
		'id' => false,
		'jsd_author_can_see_request' => false,
		'jsd_public' => false,
		'properties' => false,
		'rendered_body' => false,
		'self' => false,
		'update_author' => false,
		'updated' => false,
		'visibility' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'author' => 'author',
        'body' => 'body',
        'created' => 'created',
        'id' => 'id',
        'jsd_author_can_see_request' => 'jsdAuthorCanSeeRequest',
        'jsd_public' => 'jsdPublic',
        'properties' => 'properties',
        'rendered_body' => 'renderedBody',
        'self' => 'self',
        'update_author' => 'updateAuthor',
        'updated' => 'updated',
        'visibility' => 'visibility'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'author' => 'setAuthor',
        'body' => 'setBody',
        'created' => 'setCreated',
        'id' => 'setId',
        'jsd_author_can_see_request' => 'setJsdAuthorCanSeeRequest',
        'jsd_public' => 'setJsdPublic',
        'properties' => 'setProperties',
        'rendered_body' => 'setRenderedBody',
        'self' => 'setSelf',
        'update_author' => 'setUpdateAuthor',
        'updated' => 'setUpdated',
        'visibility' => 'setVisibility'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'author' => 'getAuthor',
        'body' => 'getBody',
        'created' => 'getCreated',
        'id' => 'getId',
        'jsd_author_can_see_request' => 'getJsdAuthorCanSeeRequest',
        'jsd_public' => 'getJsdPublic',
        'properties' => 'getProperties',
        'rendered_body' => 'getRenderedBody',
        'self' => 'getSelf',
        'update_author' => 'getUpdateAuthor',
        'updated' => 'getUpdated',
        'visibility' => 'getVisibility'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('author', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('jsd_author_can_see_request', $data ?? [], null);
        $this->setIfExists('jsd_public', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], null);
        $this->setIfExists('rendered_body', $data ?? [], null);
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('update_author', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('visibility', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets author
     *
     * @return \OpenAPI\Client\Model\CommentAuthor|null
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param \OpenAPI\Client\Model\CommentAuthor|null $author author
     *
     * @return self
     */
    public function setAuthor($author)
    {

        if (is_null($author)) {
            throw new \InvalidArgumentException('non-nullable author cannot be null');
        }

        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body The comment text.
     *
     * @return self
     */
    public function setBody($body)
    {

        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }

        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created The date and time at which the comment was created.
     *
     * @return self
     */
    public function setCreated($created)
    {

        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }

        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of the comment.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets jsd_author_can_see_request
     *
     * @return bool|null
     */
    public function getJsdAuthorCanSeeRequest()
    {
        return $this->container['jsd_author_can_see_request'];
    }

    /**
     * Sets jsd_author_can_see_request
     *
     * @param bool|null $jsd_author_can_see_request Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature.
     *
     * @return self
     */
    public function setJsdAuthorCanSeeRequest($jsd_author_can_see_request)
    {

        if (is_null($jsd_author_can_see_request)) {
            throw new \InvalidArgumentException('non-nullable jsd_author_can_see_request cannot be null');
        }

        $this->container['jsd_author_can_see_request'] = $jsd_author_can_see_request;

        return $this;
    }

    /**
     * Gets jsd_public
     *
     * @return bool|null
     */
    public function getJsdPublic()
    {
        return $this->container['jsd_public'];
    }

    /**
     * Sets jsd_public
     *
     * @param bool|null $jsd_public Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn't use Jira Service Desk or the project isn't a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation.
     *
     * @return self
     */
    public function setJsdPublic($jsd_public)
    {

        if (is_null($jsd_public)) {
            throw new \InvalidArgumentException('non-nullable jsd_public cannot be null');
        }

        $this->container['jsd_public'] = $jsd_public;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \OpenAPI\Client\Model\EntityProperty[]|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \OpenAPI\Client\Model\EntityProperty[]|null $properties A list of comment properties. Optional on create and update.
     *
     * @return self
     */
    public function setProperties($properties)
    {

        if (is_null($properties)) {
            throw new \InvalidArgumentException('non-nullable properties cannot be null');
        }

        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets rendered_body
     *
     * @return string|null
     */
    public function getRenderedBody()
    {
        return $this->container['rendered_body'];
    }

    /**
     * Sets rendered_body
     *
     * @param string|null $rendered_body The rendered version of the comment.
     *
     * @return self
     */
    public function setRenderedBody($rendered_body)
    {

        if (is_null($rendered_body)) {
            throw new \InvalidArgumentException('non-nullable rendered_body cannot be null');
        }

        $this->container['rendered_body'] = $rendered_body;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string|null $self The URL of the comment.
     *
     * @return self
     */
    public function setSelf($self)
    {

        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }

        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets update_author
     *
     * @return \OpenAPI\Client\Model\CommentUpdateAuthor|null
     */
    public function getUpdateAuthor()
    {
        return $this->container['update_author'];
    }

    /**
     * Sets update_author
     *
     * @param \OpenAPI\Client\Model\CommentUpdateAuthor|null $update_author update_author
     *
     * @return self
     */
    public function setUpdateAuthor($update_author)
    {

        if (is_null($update_author)) {
            throw new \InvalidArgumentException('non-nullable update_author cannot be null');
        }

        $this->container['update_author'] = $update_author;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime|null $updated The date and time at which the comment was updated last.
     *
     * @return self
     */
    public function setUpdated($updated)
    {

        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }

        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return \OpenAPI\Client\Model\CommentVisibility|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param \OpenAPI\Client\Model\CommentVisibility|null $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {

        if (is_null($visibility)) {
            throw new \InvalidArgumentException('non-nullable visibility cannot be null');
        }

        $this->container['visibility'] = $visibility;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


