<?php
/**
 * ApplicationRole
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApplicationRole Class Doc Comment
 *
 * @category Class
 * @description Details of an application role.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApplicationRole implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApplicationRole';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'default_groups' => 'string[]',
        'default_groups_details' => '\OpenAPI\Client\Model\GroupName[]',
        'defined' => 'bool',
        'group_details' => '\OpenAPI\Client\Model\GroupName[]',
        'groups' => 'string[]',
        'has_unlimited_seats' => 'bool',
        'key' => 'string',
        'name' => 'string',
        'number_of_seats' => 'int',
        'platform' => 'bool',
        'remaining_seats' => 'int',
        'selected_by_default' => 'bool',
        'user_count' => 'int',
        'user_count_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'default_groups' => null,
        'default_groups_details' => null,
        'defined' => null,
        'group_details' => null,
        'groups' => null,
        'has_unlimited_seats' => null,
        'key' => null,
        'name' => null,
        'number_of_seats' => 'int32',
        'platform' => null,
        'remaining_seats' => 'int32',
        'selected_by_default' => null,
        'user_count' => 'int32',
        'user_count_description' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'default_groups' => false,
		'default_groups_details' => false,
		'defined' => false,
		'group_details' => false,
		'groups' => false,
		'has_unlimited_seats' => false,
		'key' => false,
		'name' => false,
		'number_of_seats' => false,
		'platform' => false,
		'remaining_seats' => false,
		'selected_by_default' => false,
		'user_count' => false,
		'user_count_description' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_groups' => 'defaultGroups',
        'default_groups_details' => 'defaultGroupsDetails',
        'defined' => 'defined',
        'group_details' => 'groupDetails',
        'groups' => 'groups',
        'has_unlimited_seats' => 'hasUnlimitedSeats',
        'key' => 'key',
        'name' => 'name',
        'number_of_seats' => 'numberOfSeats',
        'platform' => 'platform',
        'remaining_seats' => 'remainingSeats',
        'selected_by_default' => 'selectedByDefault',
        'user_count' => 'userCount',
        'user_count_description' => 'userCountDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_groups' => 'setDefaultGroups',
        'default_groups_details' => 'setDefaultGroupsDetails',
        'defined' => 'setDefined',
        'group_details' => 'setGroupDetails',
        'groups' => 'setGroups',
        'has_unlimited_seats' => 'setHasUnlimitedSeats',
        'key' => 'setKey',
        'name' => 'setName',
        'number_of_seats' => 'setNumberOfSeats',
        'platform' => 'setPlatform',
        'remaining_seats' => 'setRemainingSeats',
        'selected_by_default' => 'setSelectedByDefault',
        'user_count' => 'setUserCount',
        'user_count_description' => 'setUserCountDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_groups' => 'getDefaultGroups',
        'default_groups_details' => 'getDefaultGroupsDetails',
        'defined' => 'getDefined',
        'group_details' => 'getGroupDetails',
        'groups' => 'getGroups',
        'has_unlimited_seats' => 'getHasUnlimitedSeats',
        'key' => 'getKey',
        'name' => 'getName',
        'number_of_seats' => 'getNumberOfSeats',
        'platform' => 'getPlatform',
        'remaining_seats' => 'getRemainingSeats',
        'selected_by_default' => 'getSelectedByDefault',
        'user_count' => 'getUserCount',
        'user_count_description' => 'getUserCountDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('default_groups', $data ?? [], null);
        $this->setIfExists('default_groups_details', $data ?? [], null);
        $this->setIfExists('defined', $data ?? [], null);
        $this->setIfExists('group_details', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('has_unlimited_seats', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('number_of_seats', $data ?? [], null);
        $this->setIfExists('platform', $data ?? [], null);
        $this->setIfExists('remaining_seats', $data ?? [], null);
        $this->setIfExists('selected_by_default', $data ?? [], null);
        $this->setIfExists('user_count', $data ?? [], null);
        $this->setIfExists('user_count_description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_groups
     *
     * @return string[]|null
     */
    public function getDefaultGroups()
    {
        return $this->container['default_groups'];
    }

    /**
     * Sets default_groups
     *
     * @param string[]|null $default_groups The groups that are granted default access for this application role. As a group's name can change, use of `defaultGroupsDetails` is recommended to identify a groups.
     *
     * @return self
     */
    public function setDefaultGroups($default_groups)
    {



        if (is_null($default_groups)) {
            throw new \InvalidArgumentException('non-nullable default_groups cannot be null');
        }

        $this->container['default_groups'] = $default_groups;

        return $this;
    }

    /**
     * Gets default_groups_details
     *
     * @return \OpenAPI\Client\Model\GroupName[]|null
     */
    public function getDefaultGroupsDetails()
    {
        return $this->container['default_groups_details'];
    }

    /**
     * Sets default_groups_details
     *
     * @param \OpenAPI\Client\Model\GroupName[]|null $default_groups_details The groups that are granted default access for this application role.
     *
     * @return self
     */
    public function setDefaultGroupsDetails($default_groups_details)
    {

        if (is_null($default_groups_details)) {
            throw new \InvalidArgumentException('non-nullable default_groups_details cannot be null');
        }

        $this->container['default_groups_details'] = $default_groups_details;

        return $this;
    }

    /**
     * Gets defined
     *
     * @return bool|null
     */
    public function getDefined()
    {
        return $this->container['defined'];
    }

    /**
     * Sets defined
     *
     * @param bool|null $defined Deprecated.
     *
     * @return self
     */
    public function setDefined($defined)
    {

        if (is_null($defined)) {
            throw new \InvalidArgumentException('non-nullable defined cannot be null');
        }

        $this->container['defined'] = $defined;

        return $this;
    }

    /**
     * Gets group_details
     *
     * @return \OpenAPI\Client\Model\GroupName[]|null
     */
    public function getGroupDetails()
    {
        return $this->container['group_details'];
    }

    /**
     * Sets group_details
     *
     * @param \OpenAPI\Client\Model\GroupName[]|null $group_details The groups associated with the application role.
     *
     * @return self
     */
    public function setGroupDetails($group_details)
    {

        if (is_null($group_details)) {
            throw new \InvalidArgumentException('non-nullable group_details cannot be null');
        }

        $this->container['group_details'] = $group_details;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return string[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param string[]|null $groups The groups associated with the application role. As a group's name can change, use of `groupDetails` is recommended to identify a groups.
     *
     * @return self
     */
    public function setGroups($groups)
    {



        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }

        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets has_unlimited_seats
     *
     * @return bool|null
     */
    public function getHasUnlimitedSeats()
    {
        return $this->container['has_unlimited_seats'];
    }

    /**
     * Sets has_unlimited_seats
     *
     * @param bool|null $has_unlimited_seats has_unlimited_seats
     *
     * @return self
     */
    public function setHasUnlimitedSeats($has_unlimited_seats)
    {

        if (is_null($has_unlimited_seats)) {
            throw new \InvalidArgumentException('non-nullable has_unlimited_seats cannot be null');
        }

        $this->container['has_unlimited_seats'] = $has_unlimited_seats;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key The key of the application role.
     *
     * @return self
     */
    public function setKey($key)
    {

        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }

        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The display name of the application role.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number_of_seats
     *
     * @return int|null
     */
    public function getNumberOfSeats()
    {
        return $this->container['number_of_seats'];
    }

    /**
     * Sets number_of_seats
     *
     * @param int|null $number_of_seats The maximum count of users on your license.
     *
     * @return self
     */
    public function setNumberOfSeats($number_of_seats)
    {

        if (is_null($number_of_seats)) {
            throw new \InvalidArgumentException('non-nullable number_of_seats cannot be null');
        }

        $this->container['number_of_seats'] = $number_of_seats;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return bool|null
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param bool|null $platform Indicates if the application role belongs to Jira platform (`jira-core`).
     *
     * @return self
     */
    public function setPlatform($platform)
    {

        if (is_null($platform)) {
            throw new \InvalidArgumentException('non-nullable platform cannot be null');
        }

        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets remaining_seats
     *
     * @return int|null
     */
    public function getRemainingSeats()
    {
        return $this->container['remaining_seats'];
    }

    /**
     * Sets remaining_seats
     *
     * @param int|null $remaining_seats The count of users remaining on your license.
     *
     * @return self
     */
    public function setRemainingSeats($remaining_seats)
    {

        if (is_null($remaining_seats)) {
            throw new \InvalidArgumentException('non-nullable remaining_seats cannot be null');
        }

        $this->container['remaining_seats'] = $remaining_seats;

        return $this;
    }

    /**
     * Gets selected_by_default
     *
     * @return bool|null
     */
    public function getSelectedByDefault()
    {
        return $this->container['selected_by_default'];
    }

    /**
     * Sets selected_by_default
     *
     * @param bool|null $selected_by_default Determines whether this application role should be selected by default on user creation.
     *
     * @return self
     */
    public function setSelectedByDefault($selected_by_default)
    {

        if (is_null($selected_by_default)) {
            throw new \InvalidArgumentException('non-nullable selected_by_default cannot be null');
        }

        $this->container['selected_by_default'] = $selected_by_default;

        return $this;
    }

    /**
     * Gets user_count
     *
     * @return int|null
     */
    public function getUserCount()
    {
        return $this->container['user_count'];
    }

    /**
     * Sets user_count
     *
     * @param int|null $user_count The number of users counting against your license.
     *
     * @return self
     */
    public function setUserCount($user_count)
    {

        if (is_null($user_count)) {
            throw new \InvalidArgumentException('non-nullable user_count cannot be null');
        }

        $this->container['user_count'] = $user_count;

        return $this;
    }

    /**
     * Gets user_count_description
     *
     * @return string|null
     */
    public function getUserCountDescription()
    {
        return $this->container['user_count_description'];
    }

    /**
     * Sets user_count_description
     *
     * @param string|null $user_count_description The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.
     *
     * @return self
     */
    public function setUserCountDescription($user_count_description)
    {

        if (is_null($user_count_description)) {
            throw new \InvalidArgumentException('non-nullable user_count_description cannot be null');
        }

        $this->container['user_count_description'] = $user_count_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


