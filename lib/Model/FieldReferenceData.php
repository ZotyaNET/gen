<?php
/**
 * FieldReferenceData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FieldReferenceData Class Doc Comment
 *
 * @category Class
 * @description Details of a field that can be used in advanced searches.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FieldReferenceData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FieldReferenceData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'auto' => 'string',
        'cfid' => 'string',
        'deprecated' => 'string',
        'deprecated_searcher_key' => 'string',
        'display_name' => 'string',
        'operators' => 'string[]',
        'orderable' => 'string',
        'searchable' => 'string',
        'types' => 'string[]',
        'value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'auto' => null,
        'cfid' => null,
        'deprecated' => null,
        'deprecated_searcher_key' => null,
        'display_name' => null,
        'operators' => null,
        'orderable' => null,
        'searchable' => null,
        'types' => null,
        'value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'auto' => false,
		'cfid' => false,
		'deprecated' => false,
		'deprecated_searcher_key' => false,
		'display_name' => false,
		'operators' => false,
		'orderable' => false,
		'searchable' => false,
		'types' => false,
		'value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto' => 'auto',
        'cfid' => 'cfid',
        'deprecated' => 'deprecated',
        'deprecated_searcher_key' => 'deprecatedSearcherKey',
        'display_name' => 'displayName',
        'operators' => 'operators',
        'orderable' => 'orderable',
        'searchable' => 'searchable',
        'types' => 'types',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto' => 'setAuto',
        'cfid' => 'setCfid',
        'deprecated' => 'setDeprecated',
        'deprecated_searcher_key' => 'setDeprecatedSearcherKey',
        'display_name' => 'setDisplayName',
        'operators' => 'setOperators',
        'orderable' => 'setOrderable',
        'searchable' => 'setSearchable',
        'types' => 'setTypes',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto' => 'getAuto',
        'cfid' => 'getCfid',
        'deprecated' => 'getDeprecated',
        'deprecated_searcher_key' => 'getDeprecatedSearcherKey',
        'display_name' => 'getDisplayName',
        'operators' => 'getOperators',
        'orderable' => 'getOrderable',
        'searchable' => 'getSearchable',
        'types' => 'getTypes',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const AUTO_TRUE = 'true';
    public const AUTO_FALSE = 'false';
    public const DEPRECATED_TRUE = 'true';
    public const DEPRECATED_FALSE = 'false';
    public const ORDERABLE_TRUE = 'true';
    public const ORDERABLE_FALSE = 'false';
    public const SEARCHABLE_TRUE = 'true';
    public const SEARCHABLE_FALSE = 'false';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoAllowableValues()
    {
        return [
            self::AUTO_TRUE,
            self::AUTO_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeprecatedAllowableValues()
    {
        return [
            self::DEPRECATED_TRUE,
            self::DEPRECATED_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderableAllowableValues()
    {
        return [
            self::ORDERABLE_TRUE,
            self::ORDERABLE_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSearchableAllowableValues()
    {
        return [
            self::SEARCHABLE_TRUE,
            self::SEARCHABLE_FALSE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('auto', $data ?? [], null);
        $this->setIfExists('cfid', $data ?? [], null);
        $this->setIfExists('deprecated', $data ?? [], null);
        $this->setIfExists('deprecated_searcher_key', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('operators', $data ?? [], null);
        $this->setIfExists('orderable', $data ?? [], null);
        $this->setIfExists('searchable', $data ?? [], null);
        $this->setIfExists('types', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAutoAllowableValues();
        if (!is_null($this->container['auto']) && !in_array($this->container['auto'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto', must be one of '%s'",
                $this->container['auto'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeprecatedAllowableValues();
        if (!is_null($this->container['deprecated']) && !in_array($this->container['deprecated'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deprecated', must be one of '%s'",
                $this->container['deprecated'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderableAllowableValues();
        if (!is_null($this->container['orderable']) && !in_array($this->container['orderable'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'orderable', must be one of '%s'",
                $this->container['orderable'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSearchableAllowableValues();
        if (!is_null($this->container['searchable']) && !in_array($this->container['searchable'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'searchable', must be one of '%s'",
                $this->container['searchable'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto
     *
     * @return string|null
     */
    public function getAuto()
    {
        return $this->container['auto'];
    }

    /**
     * Sets auto
     *
     * @param string|null $auto Whether the field provide auto-complete suggestions.
     *
     * @return self
     */
    public function setAuto($auto)
    {
        $allowedValues = $this->getAutoAllowableValues();
        if (!is_null($auto) && !in_array($auto, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto', must be one of '%s'",
                    $auto,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($auto)) {
            throw new \InvalidArgumentException('non-nullable auto cannot be null');
        }

        $this->container['auto'] = $auto;

        return $this;
    }

    /**
     * Gets cfid
     *
     * @return string|null
     */
    public function getCfid()
    {
        return $this->container['cfid'];
    }

    /**
     * Sets cfid
     *
     * @param string|null $cfid If the item is a custom field, the ID of the custom field.
     *
     * @return self
     */
    public function setCfid($cfid)
    {

        if (is_null($cfid)) {
            throw new \InvalidArgumentException('non-nullable cfid cannot be null');
        }

        $this->container['cfid'] = $cfid;

        return $this;
    }

    /**
     * Gets deprecated
     *
     * @return string|null
     */
    public function getDeprecated()
    {
        return $this->container['deprecated'];
    }

    /**
     * Sets deprecated
     *
     * @param string|null $deprecated Whether this field has been deprecated.
     *
     * @return self
     */
    public function setDeprecated($deprecated)
    {
        $allowedValues = $this->getDeprecatedAllowableValues();
        if (!is_null($deprecated) && !in_array($deprecated, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deprecated', must be one of '%s'",
                    $deprecated,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($deprecated)) {
            throw new \InvalidArgumentException('non-nullable deprecated cannot be null');
        }

        $this->container['deprecated'] = $deprecated;

        return $this;
    }

    /**
     * Gets deprecated_searcher_key
     *
     * @return string|null
     */
    public function getDeprecatedSearcherKey()
    {
        return $this->container['deprecated_searcher_key'];
    }

    /**
     * Sets deprecated_searcher_key
     *
     * @param string|null $deprecated_searcher_key The searcher key of the field, only passed when the field is deprecated.
     *
     * @return self
     */
    public function setDeprecatedSearcherKey($deprecated_searcher_key)
    {

        if (is_null($deprecated_searcher_key)) {
            throw new \InvalidArgumentException('non-nullable deprecated_searcher_key cannot be null');
        }

        $this->container['deprecated_searcher_key'] = $deprecated_searcher_key;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name The display name contains the following:   *  for system fields, the field name. For example, `Summary`.  *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.  *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {

        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets operators
     *
     * @return string[]|null
     */
    public function getOperators()
    {
        return $this->container['operators'];
    }

    /**
     * Sets operators
     *
     * @param string[]|null $operators The valid search operators for the field.
     *
     * @return self
     */
    public function setOperators($operators)
    {

        if (is_null($operators)) {
            throw new \InvalidArgumentException('non-nullable operators cannot be null');
        }

        $this->container['operators'] = $operators;

        return $this;
    }

    /**
     * Gets orderable
     *
     * @return string|null
     */
    public function getOrderable()
    {
        return $this->container['orderable'];
    }

    /**
     * Sets orderable
     *
     * @param string|null $orderable Whether the field can be used in a query's `ORDER BY` clause.
     *
     * @return self
     */
    public function setOrderable($orderable)
    {
        $allowedValues = $this->getOrderableAllowableValues();
        if (!is_null($orderable) && !in_array($orderable, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'orderable', must be one of '%s'",
                    $orderable,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($orderable)) {
            throw new \InvalidArgumentException('non-nullable orderable cannot be null');
        }

        $this->container['orderable'] = $orderable;

        return $this;
    }

    /**
     * Gets searchable
     *
     * @return string|null
     */
    public function getSearchable()
    {
        return $this->container['searchable'];
    }

    /**
     * Sets searchable
     *
     * @param string|null $searchable Whether the content of this field can be searched.
     *
     * @return self
     */
    public function setSearchable($searchable)
    {
        $allowedValues = $this->getSearchableAllowableValues();
        if (!is_null($searchable) && !in_array($searchable, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'searchable', must be one of '%s'",
                    $searchable,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($searchable)) {
            throw new \InvalidArgumentException('non-nullable searchable cannot be null');
        }

        $this->container['searchable'] = $searchable;

        return $this;
    }

    /**
     * Gets types
     *
     * @return string[]|null
     */
    public function getTypes()
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param string[]|null $types The data types of items in the field.
     *
     * @return self
     */
    public function setTypes($types)
    {

        if (is_null($types)) {
            throw new \InvalidArgumentException('non-nullable types cannot be null');
        }

        $this->container['types'] = $types;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value The field identifier.
     *
     * @return self
     */
    public function setValue($value)
    {

        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }

        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


