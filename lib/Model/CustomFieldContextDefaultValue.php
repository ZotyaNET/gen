<?php
/**
 * CustomFieldContextDefaultValue
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CustomFieldContextDefaultValue Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomFieldContextDefaultValue implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomFieldContextDefaultValue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cascading_option_id' => 'string',
        'context_id' => 'string',
        'option_id' => 'string',
        'type' => 'string',
        'option_ids' => 'string[]',
        'account_id' => 'string',
        'user_filter' => '\OpenAPI\Client\Model\UserFilter',
        'account_ids' => 'string[]',
        'group_id' => 'string',
        'group_ids' => 'string[]',
        'date' => 'string',
        'use_current' => 'bool',
        'date_time' => 'string',
        'url' => 'string',
        'project_id' => 'string',
        'number' => 'float',
        'labels' => 'string[]',
        'text' => 'string',
        'version_id' => 'string',
        'version_order' => 'string',
        'version_ids' => 'string[]',
        'values' => 'string[]',
        'object' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cascading_option_id' => null,
        'context_id' => null,
        'option_id' => null,
        'type' => null,
        'option_ids' => null,
        'account_id' => null,
        'user_filter' => null,
        'account_ids' => null,
        'group_id' => null,
        'group_ids' => null,
        'date' => null,
        'use_current' => null,
        'date_time' => null,
        'url' => null,
        'project_id' => null,
        'number' => 'double',
        'labels' => null,
        'text' => null,
        'version_id' => null,
        'version_order' => null,
        'version_ids' => null,
        'values' => null,
        'object' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cascading_option_id' => false,
		'context_id' => false,
		'option_id' => false,
		'type' => false,
		'option_ids' => false,
		'account_id' => false,
		'user_filter' => false,
		'account_ids' => false,
		'group_id' => false,
		'group_ids' => false,
		'date' => false,
		'use_current' => false,
		'date_time' => false,
		'url' => false,
		'project_id' => false,
		'number' => false,
		'labels' => false,
		'text' => false,
		'version_id' => false,
		'version_order' => false,
		'version_ids' => false,
		'values' => false,
		'object' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cascading_option_id' => 'cascadingOptionId',
        'context_id' => 'contextId',
        'option_id' => 'optionId',
        'type' => 'type',
        'option_ids' => 'optionIds',
        'account_id' => 'accountId',
        'user_filter' => 'userFilter',
        'account_ids' => 'accountIds',
        'group_id' => 'groupId',
        'group_ids' => 'groupIds',
        'date' => 'date',
        'use_current' => 'useCurrent',
        'date_time' => 'dateTime',
        'url' => 'url',
        'project_id' => 'projectId',
        'number' => 'number',
        'labels' => 'labels',
        'text' => 'text',
        'version_id' => 'versionId',
        'version_order' => 'versionOrder',
        'version_ids' => 'versionIds',
        'values' => 'values',
        'object' => 'object'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cascading_option_id' => 'setCascadingOptionId',
        'context_id' => 'setContextId',
        'option_id' => 'setOptionId',
        'type' => 'setType',
        'option_ids' => 'setOptionIds',
        'account_id' => 'setAccountId',
        'user_filter' => 'setUserFilter',
        'account_ids' => 'setAccountIds',
        'group_id' => 'setGroupId',
        'group_ids' => 'setGroupIds',
        'date' => 'setDate',
        'use_current' => 'setUseCurrent',
        'date_time' => 'setDateTime',
        'url' => 'setUrl',
        'project_id' => 'setProjectId',
        'number' => 'setNumber',
        'labels' => 'setLabels',
        'text' => 'setText',
        'version_id' => 'setVersionId',
        'version_order' => 'setVersionOrder',
        'version_ids' => 'setVersionIds',
        'values' => 'setValues',
        'object' => 'setObject'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cascading_option_id' => 'getCascadingOptionId',
        'context_id' => 'getContextId',
        'option_id' => 'getOptionId',
        'type' => 'getType',
        'option_ids' => 'getOptionIds',
        'account_id' => 'getAccountId',
        'user_filter' => 'getUserFilter',
        'account_ids' => 'getAccountIds',
        'group_id' => 'getGroupId',
        'group_ids' => 'getGroupIds',
        'date' => 'getDate',
        'use_current' => 'getUseCurrent',
        'date_time' => 'getDateTime',
        'url' => 'getUrl',
        'project_id' => 'getProjectId',
        'number' => 'getNumber',
        'labels' => 'getLabels',
        'text' => 'getText',
        'version_id' => 'getVersionId',
        'version_order' => 'getVersionOrder',
        'version_ids' => 'getVersionIds',
        'values' => 'getValues',
        'object' => 'getObject'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cascading_option_id', $data ?? [], null);
        $this->setIfExists('context_id', $data ?? [], null);
        $this->setIfExists('option_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('option_ids', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('user_filter', $data ?? [], null);
        $this->setIfExists('account_ids', $data ?? [], null);
        $this->setIfExists('group_id', $data ?? [], null);
        $this->setIfExists('group_ids', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('use_current', $data ?? [], false);
        $this->setIfExists('date_time', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('version_id', $data ?? [], null);
        $this->setIfExists('version_order', $data ?? [], null);
        $this->setIfExists('version_ids', $data ?? [], null);
        $this->setIfExists('values', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['context_id'] === null) {
            $invalidProperties[] = "'context_id' can't be null";
        }
        if ($this->container['option_id'] === null) {
            $invalidProperties[] = "'option_id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['option_ids'] === null) {
            $invalidProperties[] = "'option_ids' can't be null";
        }
        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['user_filter'] === null) {
            $invalidProperties[] = "'user_filter' can't be null";
        }
        if ($this->container['account_ids'] === null) {
            $invalidProperties[] = "'account_ids' can't be null";
        }
        if ($this->container['group_id'] === null) {
            $invalidProperties[] = "'group_id' can't be null";
        }
        if ($this->container['group_ids'] === null) {
            $invalidProperties[] = "'group_ids' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['project_id'] === null) {
            $invalidProperties[] = "'project_id' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['labels'] === null) {
            $invalidProperties[] = "'labels' can't be null";
        }
        if ($this->container['version_id'] === null) {
            $invalidProperties[] = "'version_id' can't be null";
        }
        if ($this->container['version_ids'] === null) {
            $invalidProperties[] = "'version_ids' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cascading_option_id
     *
     * @return string|null
     */
    public function getCascadingOptionId()
    {
        return $this->container['cascading_option_id'];
    }

    /**
     * Sets cascading_option_id
     *
     * @param string|null $cascading_option_id The ID of the default cascading option.
     *
     * @return self
     */
    public function setCascadingOptionId($cascading_option_id)
    {

        if (is_null($cascading_option_id)) {
            throw new \InvalidArgumentException('non-nullable cascading_option_id cannot be null');
        }

        $this->container['cascading_option_id'] = $cascading_option_id;

        return $this;
    }

    /**
     * Gets context_id
     *
     * @return string
     */
    public function getContextId()
    {
        return $this->container['context_id'];
    }

    /**
     * Sets context_id
     *
     * @param string $context_id The ID of the context.
     *
     * @return self
     */
    public function setContextId($context_id)
    {

        if (is_null($context_id)) {
            throw new \InvalidArgumentException('non-nullable context_id cannot be null');
        }

        $this->container['context_id'] = $context_id;

        return $this;
    }

    /**
     * Gets option_id
     *
     * @return string
     */
    public function getOptionId()
    {
        return $this->container['option_id'];
    }

    /**
     * Sets option_id
     *
     * @param string $option_id The ID of the default option.
     *
     * @return self
     */
    public function setOptionId($option_id)
    {

        if (is_null($option_id)) {
            throw new \InvalidArgumentException('non-nullable option_id cannot be null');
        }

        $this->container['option_id'] = $option_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {

        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets option_ids
     *
     * @return string[]
     */
    public function getOptionIds()
    {
        return $this->container['option_ids'];
    }

    /**
     * Sets option_ids
     *
     * @param string[] $option_ids The list of IDs of the default options.
     *
     * @return self
     */
    public function setOptionIds($option_ids)
    {

        if (is_null($option_ids)) {
            throw new \InvalidArgumentException('non-nullable option_ids cannot be null');
        }

        $this->container['option_ids'] = $option_ids;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id The ID of the default user.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {

        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets user_filter
     *
     * @return \OpenAPI\Client\Model\UserFilter
     */
    public function getUserFilter()
    {
        return $this->container['user_filter'];
    }

    /**
     * Sets user_filter
     *
     * @param \OpenAPI\Client\Model\UserFilter $user_filter user_filter
     *
     * @return self
     */
    public function setUserFilter($user_filter)
    {

        if (is_null($user_filter)) {
            throw new \InvalidArgumentException('non-nullable user_filter cannot be null');
        }

        $this->container['user_filter'] = $user_filter;

        return $this;
    }

    /**
     * Gets account_ids
     *
     * @return string[]
     */
    public function getAccountIds()
    {
        return $this->container['account_ids'];
    }

    /**
     * Sets account_ids
     *
     * @param string[] $account_ids The IDs of the default users.
     *
     * @return self
     */
    public function setAccountIds($account_ids)
    {

        if (is_null($account_ids)) {
            throw new \InvalidArgumentException('non-nullable account_ids cannot be null');
        }

        $this->container['account_ids'] = $account_ids;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param string $group_id The ID of the the default group.
     *
     * @return self
     */
    public function setGroupId($group_id)
    {

        if (is_null($group_id)) {
            throw new \InvalidArgumentException('non-nullable group_id cannot be null');
        }

        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets group_ids
     *
     * @return string[]
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     *
     * @param string[] $group_ids The IDs of the default groups.
     *
     * @return self
     */
    public function setGroupIds($group_ids)
    {



        if (is_null($group_ids)) {
            throw new \InvalidArgumentException('non-nullable group_ids cannot be null');
        }

        $this->container['group_ids'] = $group_ids;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date The default date in ISO format. Ignored if `useCurrent` is true.
     *
     * @return self
     */
    public function setDate($date)
    {

        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }

        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets use_current
     *
     * @return bool|null
     */
    public function getUseCurrent()
    {
        return $this->container['use_current'];
    }

    /**
     * Sets use_current
     *
     * @param bool|null $use_current Whether to use the current date.
     *
     * @return self
     */
    public function setUseCurrent($use_current)
    {

        if (is_null($use_current)) {
            throw new \InvalidArgumentException('non-nullable use_current cannot be null');
        }

        $this->container['use_current'] = $use_current;

        return $this;
    }

    /**
     * Gets date_time
     *
     * @return string|null
     */
    public function getDateTime()
    {
        return $this->container['date_time'];
    }

    /**
     * Sets date_time
     *
     * @param string|null $date_time The default date-time in ISO format. Ignored if `useCurrent` is true.
     *
     * @return self
     */
    public function setDateTime($date_time)
    {

        if (is_null($date_time)) {
            throw new \InvalidArgumentException('non-nullable date_time cannot be null');
        }

        $this->container['date_time'] = $date_time;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The default URL.
     *
     * @return self
     */
    public function setUrl($url)
    {

        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id The ID of the default project.
     *
     * @return self
     */
    public function setProjectId($project_id)
    {

        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }

        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return float
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param float $number The default floating-point number.
     *
     * @return self
     */
    public function setNumber($number)
    {

        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[] $labels The default labels value.
     *
     * @return self
     */
    public function setLabels($labels)
    {

        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }

        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text The default text. The maximum length is 254 characters.
     *
     * @return self
     */
    public function setText($text)
    {

        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }

        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets version_id
     *
     * @return string
     */
    public function getVersionId()
    {
        return $this->container['version_id'];
    }

    /**
     * Sets version_id
     *
     * @param string $version_id The ID of the default version.
     *
     * @return self
     */
    public function setVersionId($version_id)
    {

        if (is_null($version_id)) {
            throw new \InvalidArgumentException('non-nullable version_id cannot be null');
        }

        $this->container['version_id'] = $version_id;

        return $this;
    }

    /**
     * Gets version_order
     *
     * @return string|null
     */
    public function getVersionOrder()
    {
        return $this->container['version_order'];
    }

    /**
     * Sets version_order
     *
     * @param string|null $version_order The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are `\"releasedFirst\"` and `\"unreleasedFirst\"`.
     *
     * @return self
     */
    public function setVersionOrder($version_order)
    {

        if (is_null($version_order)) {
            throw new \InvalidArgumentException('non-nullable version_order cannot be null');
        }

        $this->container['version_order'] = $version_order;

        return $this;
    }

    /**
     * Gets version_ids
     *
     * @return string[]
     */
    public function getVersionIds()
    {
        return $this->container['version_ids'];
    }

    /**
     * Sets version_ids
     *
     * @param string[] $version_ids The IDs of the default versions.
     *
     * @return self
     */
    public function setVersionIds($version_ids)
    {



        if (is_null($version_ids)) {
            throw new \InvalidArgumentException('non-nullable version_ids cannot be null');
        }

        $this->container['version_ids'] = $version_ids;

        return $this;
    }

    /**
     * Gets values
     *
     * @return string[]|null
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param string[]|null $values List of string values. The maximum length for a value is 254 characters.
     *
     * @return self
     */
    public function setValues($values)
    {

        if (is_null($values)) {
            throw new \InvalidArgumentException('non-nullable values cannot be null');
        }

        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets object
     *
     * @return object|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param object|null $object The default JSON object.
     *
     * @return self
     */
    public function setObject($object)
    {

        if (is_null($object)) {
            throw new \InvalidArgumentException('non-nullable object cannot be null');
        }

        $this->container['object'] = $object;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


