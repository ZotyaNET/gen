<?php
/**
 * Webhook
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Webhook Class Doc Comment
 *
 * @category Class
 * @description A webhook.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Webhook implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Webhook';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'events' => 'string[]',
        'expiration_date' => 'int',
        'field_ids_filter' => 'string[]',
        'id' => 'int',
        'issue_property_keys_filter' => 'string[]',
        'jql_filter' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'events' => null,
        'expiration_date' => 'int64',
        'field_ids_filter' => null,
        'id' => 'int64',
        'issue_property_keys_filter' => null,
        'jql_filter' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'events' => false,
		'expiration_date' => false,
		'field_ids_filter' => false,
		'id' => false,
		'issue_property_keys_filter' => false,
		'jql_filter' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'events' => 'events',
        'expiration_date' => 'expirationDate',
        'field_ids_filter' => 'fieldIdsFilter',
        'id' => 'id',
        'issue_property_keys_filter' => 'issuePropertyKeysFilter',
        'jql_filter' => 'jqlFilter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'events' => 'setEvents',
        'expiration_date' => 'setExpirationDate',
        'field_ids_filter' => 'setFieldIdsFilter',
        'id' => 'setId',
        'issue_property_keys_filter' => 'setIssuePropertyKeysFilter',
        'jql_filter' => 'setJqlFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'events' => 'getEvents',
        'expiration_date' => 'getExpirationDate',
        'field_ids_filter' => 'getFieldIdsFilter',
        'id' => 'getId',
        'issue_property_keys_filter' => 'getIssuePropertyKeysFilter',
        'jql_filter' => 'getJqlFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EVENTS_JIRAISSUE_CREATED = 'jira:issue_created';
    public const EVENTS_JIRAISSUE_UPDATED = 'jira:issue_updated';
    public const EVENTS_JIRAISSUE_DELETED = 'jira:issue_deleted';
    public const EVENTS_COMMENT_CREATED = 'comment_created';
    public const EVENTS_COMMENT_UPDATED = 'comment_updated';
    public const EVENTS_COMMENT_DELETED = 'comment_deleted';
    public const EVENTS_ISSUE_PROPERTY_SET = 'issue_property_set';
    public const EVENTS_ISSUE_PROPERTY_DELETED = 'issue_property_deleted';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventsAllowableValues()
    {
        return [
            self::EVENTS_JIRAISSUE_CREATED,
            self::EVENTS_JIRAISSUE_UPDATED,
            self::EVENTS_JIRAISSUE_DELETED,
            self::EVENTS_COMMENT_CREATED,
            self::EVENTS_COMMENT_UPDATED,
            self::EVENTS_COMMENT_DELETED,
            self::EVENTS_ISSUE_PROPERTY_SET,
            self::EVENTS_ISSUE_PROPERTY_DELETED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('events', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('field_ids_filter', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('issue_property_keys_filter', $data ?? [], null);
        $this->setIfExists('jql_filter', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['events'] === null) {
            $invalidProperties[] = "'events' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['jql_filter'] === null) {
            $invalidProperties[] = "'jql_filter' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets events
     *
     * @return string[]
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param string[] $events The Jira events that trigger the webhook.
     *
     * @return self
     */
    public function setEvents($events)
    {
        $allowedValues = $this->getEventsAllowableValues();
        if (array_diff($events, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'events', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($events)) {
            throw new \InvalidArgumentException('non-nullable events cannot be null');
        }

        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return int|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param int|null $expiration_date The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {

        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }

        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets field_ids_filter
     *
     * @return string[]|null
     */
    public function getFieldIdsFilter()
    {
        return $this->container['field_ids_filter'];
    }

    /**
     * Sets field_ids_filter
     *
     * @param string[]|null $field_ids_filter A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
     *
     * @return self
     */
    public function setFieldIdsFilter($field_ids_filter)
    {

        if (is_null($field_ids_filter)) {
            throw new \InvalidArgumentException('non-nullable field_ids_filter cannot be null');
        }

        $this->container['field_ids_filter'] = $field_ids_filter;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the webhook.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets issue_property_keys_filter
     *
     * @return string[]|null
     */
    public function getIssuePropertyKeysFilter()
    {
        return $this->container['issue_property_keys_filter'];
    }

    /**
     * Sets issue_property_keys_filter
     *
     * @param string[]|null $issue_property_keys_filter A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
     *
     * @return self
     */
    public function setIssuePropertyKeysFilter($issue_property_keys_filter)
    {

        if (is_null($issue_property_keys_filter)) {
            throw new \InvalidArgumentException('non-nullable issue_property_keys_filter cannot be null');
        }

        $this->container['issue_property_keys_filter'] = $issue_property_keys_filter;

        return $this;
    }

    /**
     * Gets jql_filter
     *
     * @return string
     */
    public function getJqlFilter()
    {
        return $this->container['jql_filter'];
    }

    /**
     * Sets jql_filter
     *
     * @param string $jql_filter The JQL filter that specifies which issues the webhook is sent for.
     *
     * @return self
     */
    public function setJqlFilter($jql_filter)
    {

        if (is_null($jql_filter)) {
            throw new \InvalidArgumentException('non-nullable jql_filter cannot be null');
        }

        $this->container['jql_filter'] = $jql_filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


