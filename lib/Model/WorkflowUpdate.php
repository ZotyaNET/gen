<?php
/**
 * WorkflowUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WorkflowUpdate Class Doc Comment
 *
 * @category Class
 * @description The details of the workflows to update.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WorkflowUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WorkflowUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'default_status_mappings' => '\OpenAPI\Client\Model\StatusMigration[]',
        'description' => 'string',
        'id' => 'string',
        'start_point_layout' => '\OpenAPI\Client\Model\WorkflowLayout',
        'status_mappings' => '\OpenAPI\Client\Model\StatusMappingDTO[]',
        'statuses' => '\OpenAPI\Client\Model\StatusLayoutUpdate[]',
        'transitions' => '\OpenAPI\Client\Model\TransitionUpdateDTO[]',
        'version' => '\OpenAPI\Client\Model\DocumentVersion'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'default_status_mappings' => null,
        'description' => null,
        'id' => null,
        'start_point_layout' => null,
        'status_mappings' => null,
        'statuses' => null,
        'transitions' => null,
        'version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'default_status_mappings' => false,
		'description' => false,
		'id' => false,
		'start_point_layout' => true,
		'status_mappings' => false,
		'statuses' => false,
		'transitions' => false,
		'version' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_status_mappings' => 'defaultStatusMappings',
        'description' => 'description',
        'id' => 'id',
        'start_point_layout' => 'startPointLayout',
        'status_mappings' => 'statusMappings',
        'statuses' => 'statuses',
        'transitions' => 'transitions',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_status_mappings' => 'setDefaultStatusMappings',
        'description' => 'setDescription',
        'id' => 'setId',
        'start_point_layout' => 'setStartPointLayout',
        'status_mappings' => 'setStatusMappings',
        'statuses' => 'setStatuses',
        'transitions' => 'setTransitions',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_status_mappings' => 'getDefaultStatusMappings',
        'description' => 'getDescription',
        'id' => 'getId',
        'start_point_layout' => 'getStartPointLayout',
        'status_mappings' => 'getStatusMappings',
        'statuses' => 'getStatuses',
        'transitions' => 'getTransitions',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('default_status_mappings', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('start_point_layout', $data ?? [], null);
        $this->setIfExists('status_mappings', $data ?? [], null);
        $this->setIfExists('statuses', $data ?? [], null);
        $this->setIfExists('transitions', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['statuses'] === null) {
            $invalidProperties[] = "'statuses' can't be null";
        }
        if ($this->container['transitions'] === null) {
            $invalidProperties[] = "'transitions' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_status_mappings
     *
     * @return \OpenAPI\Client\Model\StatusMigration[]|null
     */
    public function getDefaultStatusMappings()
    {
        return $this->container['default_status_mappings'];
    }

    /**
     * Sets default_status_mappings
     *
     * @param \OpenAPI\Client\Model\StatusMigration[]|null $default_status_mappings The mapping of old to new status ID.
     *
     * @return self
     */
    public function setDefaultStatusMappings($default_status_mappings)
    {

        if (is_null($default_status_mappings)) {
            throw new \InvalidArgumentException('non-nullable default_status_mappings cannot be null');
        }

        $this->container['default_status_mappings'] = $default_status_mappings;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The new description for this workflow.
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID of this workflow.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets start_point_layout
     *
     * @return \OpenAPI\Client\Model\WorkflowLayout|null
     */
    public function getStartPointLayout()
    {
        return $this->container['start_point_layout'];
    }

    /**
     * Sets start_point_layout
     *
     * @param \OpenAPI\Client\Model\WorkflowLayout|null $start_point_layout start_point_layout
     *
     * @return self
     */
    public function setStartPointLayout($start_point_layout)
    {

        if (is_null($start_point_layout)) {
            array_push($this->openAPINullablesSetToNull, 'start_point_layout');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_point_layout', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['start_point_layout'] = $start_point_layout;

        return $this;
    }

    /**
     * Gets status_mappings
     *
     * @return \OpenAPI\Client\Model\StatusMappingDTO[]|null
     */
    public function getStatusMappings()
    {
        return $this->container['status_mappings'];
    }

    /**
     * Sets status_mappings
     *
     * @param \OpenAPI\Client\Model\StatusMappingDTO[]|null $status_mappings The mapping of old to new status ID for a specific project and issue type.
     *
     * @return self
     */
    public function setStatusMappings($status_mappings)
    {

        if (is_null($status_mappings)) {
            throw new \InvalidArgumentException('non-nullable status_mappings cannot be null');
        }

        $this->container['status_mappings'] = $status_mappings;

        return $this;
    }

    /**
     * Gets statuses
     *
     * @return \OpenAPI\Client\Model\StatusLayoutUpdate[]
     */
    public function getStatuses()
    {
        return $this->container['statuses'];
    }

    /**
     * Sets statuses
     *
     * @param \OpenAPI\Client\Model\StatusLayoutUpdate[] $statuses The statuses associated with this workflow.
     *
     * @return self
     */
    public function setStatuses($statuses)
    {

        if (is_null($statuses)) {
            throw new \InvalidArgumentException('non-nullable statuses cannot be null');
        }

        $this->container['statuses'] = $statuses;

        return $this;
    }

    /**
     * Gets transitions
     *
     * @return \OpenAPI\Client\Model\TransitionUpdateDTO[]
     */
    public function getTransitions()
    {
        return $this->container['transitions'];
    }

    /**
     * Sets transitions
     *
     * @param \OpenAPI\Client\Model\TransitionUpdateDTO[] $transitions The transitions of this workflow.
     *
     * @return self
     */
    public function setTransitions($transitions)
    {

        if (is_null($transitions)) {
            throw new \InvalidArgumentException('non-nullable transitions cannot be null');
        }

        $this->container['transitions'] = $transitions;

        return $this;
    }

    /**
     * Gets version
     *
     * @return \OpenAPI\Client\Model\DocumentVersion
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param \OpenAPI\Client\Model\DocumentVersion $version version
     *
     * @return self
     */
    public function setVersion($version)
    {

        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }

        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


