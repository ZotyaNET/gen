<?php
/**
 * SimplifiedHierarchyLevel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SimplifiedHierarchyLevel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SimplifiedHierarchyLevel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SimplifiedHierarchyLevel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'above_level_id' => 'int',
        'below_level_id' => 'int',
        'external_uuid' => 'string',
        'hierarchy_level_number' => 'int',
        'id' => 'int',
        'issue_type_ids' => 'int[]',
        'level' => 'int',
        'name' => 'string',
        'project_configuration_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'above_level_id' => 'int64',
        'below_level_id' => 'int64',
        'external_uuid' => 'uuid',
        'hierarchy_level_number' => 'int32',
        'id' => 'int64',
        'issue_type_ids' => 'int64',
        'level' => 'int32',
        'name' => null,
        'project_configuration_id' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'above_level_id' => false,
		'below_level_id' => false,
		'external_uuid' => false,
		'hierarchy_level_number' => false,
		'id' => false,
		'issue_type_ids' => false,
		'level' => false,
		'name' => false,
		'project_configuration_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'above_level_id' => 'aboveLevelId',
        'below_level_id' => 'belowLevelId',
        'external_uuid' => 'externalUuid',
        'hierarchy_level_number' => 'hierarchyLevelNumber',
        'id' => 'id',
        'issue_type_ids' => 'issueTypeIds',
        'level' => 'level',
        'name' => 'name',
        'project_configuration_id' => 'projectConfigurationId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'above_level_id' => 'setAboveLevelId',
        'below_level_id' => 'setBelowLevelId',
        'external_uuid' => 'setExternalUuid',
        'hierarchy_level_number' => 'setHierarchyLevelNumber',
        'id' => 'setId',
        'issue_type_ids' => 'setIssueTypeIds',
        'level' => 'setLevel',
        'name' => 'setName',
        'project_configuration_id' => 'setProjectConfigurationId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'above_level_id' => 'getAboveLevelId',
        'below_level_id' => 'getBelowLevelId',
        'external_uuid' => 'getExternalUuid',
        'hierarchy_level_number' => 'getHierarchyLevelNumber',
        'id' => 'getId',
        'issue_type_ids' => 'getIssueTypeIds',
        'level' => 'getLevel',
        'name' => 'getName',
        'project_configuration_id' => 'getProjectConfigurationId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('above_level_id', $data ?? [], null);
        $this->setIfExists('below_level_id', $data ?? [], null);
        $this->setIfExists('external_uuid', $data ?? [], null);
        $this->setIfExists('hierarchy_level_number', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('issue_type_ids', $data ?? [], null);
        $this->setIfExists('level', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('project_configuration_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets above_level_id
     *
     * @return int|null
     */
    public function getAboveLevelId()
    {
        return $this->container['above_level_id'];
    }

    /**
     * Sets above_level_id
     *
     * @param int|null $above_level_id The ID of the level above this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
     *
     * @return self
     */
    public function setAboveLevelId($above_level_id)
    {

        if (is_null($above_level_id)) {
            throw new \InvalidArgumentException('non-nullable above_level_id cannot be null');
        }

        $this->container['above_level_id'] = $above_level_id;

        return $this;
    }

    /**
     * Gets below_level_id
     *
     * @return int|null
     */
    public function getBelowLevelId()
    {
        return $this->container['below_level_id'];
    }

    /**
     * Sets below_level_id
     *
     * @param int|null $below_level_id The ID of the level below this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
     *
     * @return self
     */
    public function setBelowLevelId($below_level_id)
    {

        if (is_null($below_level_id)) {
            throw new \InvalidArgumentException('non-nullable below_level_id cannot be null');
        }

        $this->container['below_level_id'] = $below_level_id;

        return $this;
    }

    /**
     * Gets external_uuid
     *
     * @return string|null
     */
    public function getExternalUuid()
    {
        return $this->container['external_uuid'];
    }

    /**
     * Sets external_uuid
     *
     * @param string|null $external_uuid The external UUID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
     *
     * @return self
     */
    public function setExternalUuid($external_uuid)
    {

        if (is_null($external_uuid)) {
            throw new \InvalidArgumentException('non-nullable external_uuid cannot be null');
        }

        $this->container['external_uuid'] = $external_uuid;

        return $this;
    }

    /**
     * Gets hierarchy_level_number
     *
     * @return int|null
     */
    public function getHierarchyLevelNumber()
    {
        return $this->container['hierarchy_level_number'];
    }

    /**
     * Sets hierarchy_level_number
     *
     * @param int|null $hierarchy_level_number hierarchy_level_number
     *
     * @return self
     */
    public function setHierarchyLevelNumber($hierarchy_level_number)
    {

        if (is_null($hierarchy_level_number)) {
            throw new \InvalidArgumentException('non-nullable hierarchy_level_number cannot be null');
        }

        $this->container['hierarchy_level_number'] = $hierarchy_level_number;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets issue_type_ids
     *
     * @return int[]|null
     */
    public function getIssueTypeIds()
    {
        return $this->container['issue_type_ids'];
    }

    /**
     * Sets issue_type_ids
     *
     * @param int[]|null $issue_type_ids The issue types available in this hierarchy level.
     *
     * @return self
     */
    public function setIssueTypeIds($issue_type_ids)
    {

        if (is_null($issue_type_ids)) {
            throw new \InvalidArgumentException('non-nullable issue_type_ids cannot be null');
        }

        $this->container['issue_type_ids'] = $issue_type_ids;

        return $this;
    }

    /**
     * Gets level
     *
     * @return int|null
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param int|null $level The level of this item in the hierarchy.
     *
     * @return self
     */
    public function setLevel($level)
    {

        if (is_null($level)) {
            throw new \InvalidArgumentException('non-nullable level cannot be null');
        }

        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of this hierarchy level.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets project_configuration_id
     *
     * @return int|null
     */
    public function getProjectConfigurationId()
    {
        return $this->container['project_configuration_id'];
    }

    /**
     * Sets project_configuration_id
     *
     * @param int|null $project_configuration_id The ID of the project configuration. This property is deprecated, see [Change oticen: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
     *
     * @return self
     */
    public function setProjectConfigurationId($project_configuration_id)
    {

        if (is_null($project_configuration_id)) {
            throw new \InvalidArgumentException('non-nullable project_configuration_id cannot be null');
        }

        $this->container['project_configuration_id'] = $project_configuration_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


