<?php
/**
 * HistoryMetadata
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HistoryMetadata Class Doc Comment
 *
 * @category Class
 * @description Details of issue history metadata.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HistoryMetadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HistoryMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activity_description' => 'string',
        'activity_description_key' => 'string',
        'actor' => '\OpenAPI\Client\Model\HistoryMetadataActor',
        'cause' => '\OpenAPI\Client\Model\HistoryMetadataCause',
        'description' => 'string',
        'description_key' => 'string',
        'email_description' => 'string',
        'email_description_key' => 'string',
        'extra_data' => 'array<string,string>',
        'generator' => '\OpenAPI\Client\Model\HistoryMetadataGenerator',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'activity_description' => null,
        'activity_description_key' => null,
        'actor' => null,
        'cause' => null,
        'description' => null,
        'description_key' => null,
        'email_description' => null,
        'email_description_key' => null,
        'extra_data' => null,
        'generator' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'activity_description' => false,
		'activity_description_key' => false,
		'actor' => false,
		'cause' => false,
		'description' => false,
		'description_key' => false,
		'email_description' => false,
		'email_description_key' => false,
		'extra_data' => false,
		'generator' => false,
		'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activity_description' => 'activityDescription',
        'activity_description_key' => 'activityDescriptionKey',
        'actor' => 'actor',
        'cause' => 'cause',
        'description' => 'description',
        'description_key' => 'descriptionKey',
        'email_description' => 'emailDescription',
        'email_description_key' => 'emailDescriptionKey',
        'extra_data' => 'extraData',
        'generator' => 'generator',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activity_description' => 'setActivityDescription',
        'activity_description_key' => 'setActivityDescriptionKey',
        'actor' => 'setActor',
        'cause' => 'setCause',
        'description' => 'setDescription',
        'description_key' => 'setDescriptionKey',
        'email_description' => 'setEmailDescription',
        'email_description_key' => 'setEmailDescriptionKey',
        'extra_data' => 'setExtraData',
        'generator' => 'setGenerator',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activity_description' => 'getActivityDescription',
        'activity_description_key' => 'getActivityDescriptionKey',
        'actor' => 'getActor',
        'cause' => 'getCause',
        'description' => 'getDescription',
        'description_key' => 'getDescriptionKey',
        'email_description' => 'getEmailDescription',
        'email_description_key' => 'getEmailDescriptionKey',
        'extra_data' => 'getExtraData',
        'generator' => 'getGenerator',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('activity_description', $data ?? [], null);
        $this->setIfExists('activity_description_key', $data ?? [], null);
        $this->setIfExists('actor', $data ?? [], null);
        $this->setIfExists('cause', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('description_key', $data ?? [], null);
        $this->setIfExists('email_description', $data ?? [], null);
        $this->setIfExists('email_description_key', $data ?? [], null);
        $this->setIfExists('extra_data', $data ?? [], null);
        $this->setIfExists('generator', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activity_description
     *
     * @return string|null
     */
    public function getActivityDescription()
    {
        return $this->container['activity_description'];
    }

    /**
     * Sets activity_description
     *
     * @param string|null $activity_description The activity described in the history record.
     *
     * @return self
     */
    public function setActivityDescription($activity_description)
    {

        if (is_null($activity_description)) {
            throw new \InvalidArgumentException('non-nullable activity_description cannot be null');
        }

        $this->container['activity_description'] = $activity_description;

        return $this;
    }

    /**
     * Gets activity_description_key
     *
     * @return string|null
     */
    public function getActivityDescriptionKey()
    {
        return $this->container['activity_description_key'];
    }

    /**
     * Sets activity_description_key
     *
     * @param string|null $activity_description_key The key of the activity described in the history record.
     *
     * @return self
     */
    public function setActivityDescriptionKey($activity_description_key)
    {

        if (is_null($activity_description_key)) {
            throw new \InvalidArgumentException('non-nullable activity_description_key cannot be null');
        }

        $this->container['activity_description_key'] = $activity_description_key;

        return $this;
    }

    /**
     * Gets actor
     *
     * @return \OpenAPI\Client\Model\HistoryMetadataActor|null
     */
    public function getActor()
    {
        return $this->container['actor'];
    }

    /**
     * Sets actor
     *
     * @param \OpenAPI\Client\Model\HistoryMetadataActor|null $actor actor
     *
     * @return self
     */
    public function setActor($actor)
    {

        if (is_null($actor)) {
            throw new \InvalidArgumentException('non-nullable actor cannot be null');
        }

        $this->container['actor'] = $actor;

        return $this;
    }

    /**
     * Gets cause
     *
     * @return \OpenAPI\Client\Model\HistoryMetadataCause|null
     */
    public function getCause()
    {
        return $this->container['cause'];
    }

    /**
     * Sets cause
     *
     * @param \OpenAPI\Client\Model\HistoryMetadataCause|null $cause cause
     *
     * @return self
     */
    public function setCause($cause)
    {

        if (is_null($cause)) {
            throw new \InvalidArgumentException('non-nullable cause cannot be null');
        }

        $this->container['cause'] = $cause;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the history record.
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_key
     *
     * @return string|null
     */
    public function getDescriptionKey()
    {
        return $this->container['description_key'];
    }

    /**
     * Sets description_key
     *
     * @param string|null $description_key The description key of the history record.
     *
     * @return self
     */
    public function setDescriptionKey($description_key)
    {

        if (is_null($description_key)) {
            throw new \InvalidArgumentException('non-nullable description_key cannot be null');
        }

        $this->container['description_key'] = $description_key;

        return $this;
    }

    /**
     * Gets email_description
     *
     * @return string|null
     */
    public function getEmailDescription()
    {
        return $this->container['email_description'];
    }

    /**
     * Sets email_description
     *
     * @param string|null $email_description The description of the email address associated the history record.
     *
     * @return self
     */
    public function setEmailDescription($email_description)
    {

        if (is_null($email_description)) {
            throw new \InvalidArgumentException('non-nullable email_description cannot be null');
        }

        $this->container['email_description'] = $email_description;

        return $this;
    }

    /**
     * Gets email_description_key
     *
     * @return string|null
     */
    public function getEmailDescriptionKey()
    {
        return $this->container['email_description_key'];
    }

    /**
     * Sets email_description_key
     *
     * @param string|null $email_description_key The description key of the email address associated the history record.
     *
     * @return self
     */
    public function setEmailDescriptionKey($email_description_key)
    {

        if (is_null($email_description_key)) {
            throw new \InvalidArgumentException('non-nullable email_description_key cannot be null');
        }

        $this->container['email_description_key'] = $email_description_key;

        return $this;
    }

    /**
     * Gets extra_data
     *
     * @return array<string,string>|null
     */
    public function getExtraData()
    {
        return $this->container['extra_data'];
    }

    /**
     * Sets extra_data
     *
     * @param array<string,string>|null $extra_data Additional arbitrary information about the history record.
     *
     * @return self
     */
    public function setExtraData($extra_data)
    {

        if (is_null($extra_data)) {
            throw new \InvalidArgumentException('non-nullable extra_data cannot be null');
        }

        $this->container['extra_data'] = $extra_data;

        return $this;
    }

    /**
     * Gets generator
     *
     * @return \OpenAPI\Client\Model\HistoryMetadataGenerator|null
     */
    public function getGenerator()
    {
        return $this->container['generator'];
    }

    /**
     * Sets generator
     *
     * @param \OpenAPI\Client\Model\HistoryMetadataGenerator|null $generator generator
     *
     * @return self
     */
    public function setGenerator($generator)
    {

        if (is_null($generator)) {
            throw new \InvalidArgumentException('non-nullable generator cannot be null');
        }

        $this->container['generator'] = $generator;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of the history record.
     *
     * @return self
     */
    public function setType($type)
    {

        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


