<?php
/**
 * ServerInformation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ServerInformation Class Doc Comment
 *
 * @category Class
 * @description Details about the Jira instance.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServerInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ServerInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'base_url' => 'string',
        'build_date' => '\DateTime',
        'build_number' => 'int',
        'deployment_type' => 'string',
        'health_checks' => '\OpenAPI\Client\Model\HealthCheckResult[]',
        'scm_info' => 'string',
        'server_time' => '\DateTime',
        'server_title' => 'string',
        'version' => 'string',
        'version_numbers' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'base_url' => null,
        'build_date' => 'date-time',
        'build_number' => 'int32',
        'deployment_type' => null,
        'health_checks' => null,
        'scm_info' => null,
        'server_time' => 'date-time',
        'server_title' => null,
        'version' => null,
        'version_numbers' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'base_url' => false,
		'build_date' => false,
		'build_number' => false,
		'deployment_type' => false,
		'health_checks' => false,
		'scm_info' => false,
		'server_time' => false,
		'server_title' => false,
		'version' => false,
		'version_numbers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_url' => 'baseUrl',
        'build_date' => 'buildDate',
        'build_number' => 'buildNumber',
        'deployment_type' => 'deploymentType',
        'health_checks' => 'healthChecks',
        'scm_info' => 'scmInfo',
        'server_time' => 'serverTime',
        'server_title' => 'serverTitle',
        'version' => 'version',
        'version_numbers' => 'versionNumbers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_url' => 'setBaseUrl',
        'build_date' => 'setBuildDate',
        'build_number' => 'setBuildNumber',
        'deployment_type' => 'setDeploymentType',
        'health_checks' => 'setHealthChecks',
        'scm_info' => 'setScmInfo',
        'server_time' => 'setServerTime',
        'server_title' => 'setServerTitle',
        'version' => 'setVersion',
        'version_numbers' => 'setVersionNumbers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_url' => 'getBaseUrl',
        'build_date' => 'getBuildDate',
        'build_number' => 'getBuildNumber',
        'deployment_type' => 'getDeploymentType',
        'health_checks' => 'getHealthChecks',
        'scm_info' => 'getScmInfo',
        'server_time' => 'getServerTime',
        'server_title' => 'getServerTitle',
        'version' => 'getVersion',
        'version_numbers' => 'getVersionNumbers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('base_url', $data ?? [], null);
        $this->setIfExists('build_date', $data ?? [], null);
        $this->setIfExists('build_number', $data ?? [], null);
        $this->setIfExists('deployment_type', $data ?? [], null);
        $this->setIfExists('health_checks', $data ?? [], null);
        $this->setIfExists('scm_info', $data ?? [], null);
        $this->setIfExists('server_time', $data ?? [], null);
        $this->setIfExists('server_title', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('version_numbers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_url
     *
     * @return string|null
     */
    public function getBaseUrl()
    {
        return $this->container['base_url'];
    }

    /**
     * Sets base_url
     *
     * @param string|null $base_url The base URL of the Jira instance.
     *
     * @return self
     */
    public function setBaseUrl($base_url)
    {

        if (is_null($base_url)) {
            throw new \InvalidArgumentException('non-nullable base_url cannot be null');
        }

        $this->container['base_url'] = $base_url;

        return $this;
    }

    /**
     * Gets build_date
     *
     * @return \DateTime|null
     */
    public function getBuildDate()
    {
        return $this->container['build_date'];
    }

    /**
     * Sets build_date
     *
     * @param \DateTime|null $build_date The timestamp when the Jira version was built.
     *
     * @return self
     */
    public function setBuildDate($build_date)
    {

        if (is_null($build_date)) {
            throw new \InvalidArgumentException('non-nullable build_date cannot be null');
        }

        $this->container['build_date'] = $build_date;

        return $this;
    }

    /**
     * Gets build_number
     *
     * @return int|null
     */
    public function getBuildNumber()
    {
        return $this->container['build_number'];
    }

    /**
     * Sets build_number
     *
     * @param int|null $build_number The build number of the Jira version.
     *
     * @return self
     */
    public function setBuildNumber($build_number)
    {

        if (is_null($build_number)) {
            throw new \InvalidArgumentException('non-nullable build_number cannot be null');
        }

        $this->container['build_number'] = $build_number;

        return $this;
    }

    /**
     * Gets deployment_type
     *
     * @return string|null
     */
    public function getDeploymentType()
    {
        return $this->container['deployment_type'];
    }

    /**
     * Sets deployment_type
     *
     * @param string|null $deployment_type The type of server deployment. This is always returned as *Cloud*.
     *
     * @return self
     */
    public function setDeploymentType($deployment_type)
    {

        if (is_null($deployment_type)) {
            throw new \InvalidArgumentException('non-nullable deployment_type cannot be null');
        }

        $this->container['deployment_type'] = $deployment_type;

        return $this;
    }

    /**
     * Gets health_checks
     *
     * @return \OpenAPI\Client\Model\HealthCheckResult[]|null
     */
    public function getHealthChecks()
    {
        return $this->container['health_checks'];
    }

    /**
     * Sets health_checks
     *
     * @param \OpenAPI\Client\Model\HealthCheckResult[]|null $health_checks Jira instance health check results. Deprecated and no longer returned.
     *
     * @return self
     */
    public function setHealthChecks($health_checks)
    {

        if (is_null($health_checks)) {
            throw new \InvalidArgumentException('non-nullable health_checks cannot be null');
        }

        $this->container['health_checks'] = $health_checks;

        return $this;
    }

    /**
     * Gets scm_info
     *
     * @return string|null
     */
    public function getScmInfo()
    {
        return $this->container['scm_info'];
    }

    /**
     * Sets scm_info
     *
     * @param string|null $scm_info The unique identifier of the Jira version.
     *
     * @return self
     */
    public function setScmInfo($scm_info)
    {

        if (is_null($scm_info)) {
            throw new \InvalidArgumentException('non-nullable scm_info cannot be null');
        }

        $this->container['scm_info'] = $scm_info;

        return $this;
    }

    /**
     * Gets server_time
     *
     * @return \DateTime|null
     */
    public function getServerTime()
    {
        return $this->container['server_time'];
    }

    /**
     * Sets server_time
     *
     * @param \DateTime|null $server_time The time in Jira when this request was responded to.
     *
     * @return self
     */
    public function setServerTime($server_time)
    {

        if (is_null($server_time)) {
            throw new \InvalidArgumentException('non-nullable server_time cannot be null');
        }

        $this->container['server_time'] = $server_time;

        return $this;
    }

    /**
     * Gets server_title
     *
     * @return string|null
     */
    public function getServerTitle()
    {
        return $this->container['server_title'];
    }

    /**
     * Sets server_title
     *
     * @param string|null $server_title The name of the Jira instance.
     *
     * @return self
     */
    public function setServerTitle($server_title)
    {

        if (is_null($server_title)) {
            throw new \InvalidArgumentException('non-nullable server_title cannot be null');
        }

        $this->container['server_title'] = $server_title;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version The version of Jira.
     *
     * @return self
     */
    public function setVersion($version)
    {

        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }

        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets version_numbers
     *
     * @return int[]|null
     */
    public function getVersionNumbers()
    {
        return $this->container['version_numbers'];
    }

    /**
     * Sets version_numbers
     *
     * @param int[]|null $version_numbers The major, minor, and revision version numbers of the Jira version.
     *
     * @return self
     */
    public function setVersionNumbers($version_numbers)
    {

        if (is_null($version_numbers)) {
            throw new \InvalidArgumentException('non-nullable version_numbers cannot be null');
        }

        $this->container['version_numbers'] = $version_numbers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


