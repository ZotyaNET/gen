<?php
/**
 * EventNotification
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EventNotification Class Doc Comment
 *
 * @category Class
 * @description Details about a notification associated with an event.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EventNotification implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EventNotification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email_address' => 'string',
        'expand' => 'string',
        'field' => '\OpenAPI\Client\Model\EventNotificationField',
        'group' => '\OpenAPI\Client\Model\EventNotificationGroup',
        'id' => 'int',
        'notification_type' => 'string',
        'parameter' => 'string',
        'project_role' => '\OpenAPI\Client\Model\EventNotificationProjectRole',
        'recipient' => 'string',
        'user' => '\OpenAPI\Client\Model\EventNotificationUser'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email_address' => null,
        'expand' => null,
        'field' => null,
        'group' => null,
        'id' => 'int64',
        'notification_type' => null,
        'parameter' => null,
        'project_role' => null,
        'recipient' => null,
        'user' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'email_address' => false,
		'expand' => false,
		'field' => false,
		'group' => false,
		'id' => false,
		'notification_type' => false,
		'parameter' => false,
		'project_role' => false,
		'recipient' => false,
		'user' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email_address' => 'emailAddress',
        'expand' => 'expand',
        'field' => 'field',
        'group' => 'group',
        'id' => 'id',
        'notification_type' => 'notificationType',
        'parameter' => 'parameter',
        'project_role' => 'projectRole',
        'recipient' => 'recipient',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email_address' => 'setEmailAddress',
        'expand' => 'setExpand',
        'field' => 'setField',
        'group' => 'setGroup',
        'id' => 'setId',
        'notification_type' => 'setNotificationType',
        'parameter' => 'setParameter',
        'project_role' => 'setProjectRole',
        'recipient' => 'setRecipient',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email_address' => 'getEmailAddress',
        'expand' => 'getExpand',
        'field' => 'getField',
        'group' => 'getGroup',
        'id' => 'getId',
        'notification_type' => 'getNotificationType',
        'parameter' => 'getParameter',
        'project_role' => 'getProjectRole',
        'recipient' => 'getRecipient',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const NOTIFICATION_TYPE_CURRENT_ASSIGNEE = 'CurrentAssignee';
    public const NOTIFICATION_TYPE_REPORTER = 'Reporter';
    public const NOTIFICATION_TYPE_CURRENT_USER = 'CurrentUser';
    public const NOTIFICATION_TYPE_PROJECT_LEAD = 'ProjectLead';
    public const NOTIFICATION_TYPE_COMPONENT_LEAD = 'ComponentLead';
    public const NOTIFICATION_TYPE_USER = 'User';
    public const NOTIFICATION_TYPE_GROUP = 'Group';
    public const NOTIFICATION_TYPE_PROJECT_ROLE = 'ProjectRole';
    public const NOTIFICATION_TYPE_EMAIL_ADDRESS = 'EmailAddress';
    public const NOTIFICATION_TYPE_ALL_WATCHERS = 'AllWatchers';
    public const NOTIFICATION_TYPE_USER_CUSTOM_FIELD = 'UserCustomField';
    public const NOTIFICATION_TYPE_GROUP_CUSTOM_FIELD = 'GroupCustomField';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNotificationTypeAllowableValues()
    {
        return [
            self::NOTIFICATION_TYPE_CURRENT_ASSIGNEE,
            self::NOTIFICATION_TYPE_REPORTER,
            self::NOTIFICATION_TYPE_CURRENT_USER,
            self::NOTIFICATION_TYPE_PROJECT_LEAD,
            self::NOTIFICATION_TYPE_COMPONENT_LEAD,
            self::NOTIFICATION_TYPE_USER,
            self::NOTIFICATION_TYPE_GROUP,
            self::NOTIFICATION_TYPE_PROJECT_ROLE,
            self::NOTIFICATION_TYPE_EMAIL_ADDRESS,
            self::NOTIFICATION_TYPE_ALL_WATCHERS,
            self::NOTIFICATION_TYPE_USER_CUSTOM_FIELD,
            self::NOTIFICATION_TYPE_GROUP_CUSTOM_FIELD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('expand', $data ?? [], null);
        $this->setIfExists('field', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('notification_type', $data ?? [], null);
        $this->setIfExists('parameter', $data ?? [], null);
        $this->setIfExists('project_role', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNotificationTypeAllowableValues();
        if (!is_null($this->container['notification_type']) && !in_array($this->container['notification_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'notification_type', must be one of '%s'",
                $this->container['notification_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address The email address.
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {

        if (is_null($email_address)) {
            throw new \InvalidArgumentException('non-nullable email_address cannot be null');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets expand
     *
     * @return string|null
     */
    public function getExpand()
    {
        return $this->container['expand'];
    }

    /**
     * Sets expand
     *
     * @param string|null $expand Expand options that include additional event notification details in the response.
     *
     * @return self
     */
    public function setExpand($expand)
    {

        if (is_null($expand)) {
            throw new \InvalidArgumentException('non-nullable expand cannot be null');
        }

        $this->container['expand'] = $expand;

        return $this;
    }

    /**
     * Gets field
     *
     * @return \OpenAPI\Client\Model\EventNotificationField|null
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param \OpenAPI\Client\Model\EventNotificationField|null $field field
     *
     * @return self
     */
    public function setField($field)
    {

        if (is_null($field)) {
            throw new \InvalidArgumentException('non-nullable field cannot be null');
        }

        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \OpenAPI\Client\Model\EventNotificationGroup|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \OpenAPI\Client\Model\EventNotificationGroup|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {

        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }

        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the notification.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets notification_type
     *
     * @return string|null
     */
    public function getNotificationType()
    {
        return $this->container['notification_type'];
    }

    /**
     * Sets notification_type
     *
     * @param string|null $notification_type Identifies the recipients of the notification.
     *
     * @return self
     */
    public function setNotificationType($notification_type)
    {
        $allowedValues = $this->getNotificationTypeAllowableValues();
        if (!is_null($notification_type) && !in_array($notification_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'notification_type', must be one of '%s'",
                    $notification_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($notification_type)) {
            throw new \InvalidArgumentException('non-nullable notification_type cannot be null');
        }

        $this->container['notification_type'] = $notification_type;

        return $this;
    }

    /**
     * Gets parameter
     *
     * @return string|null
     */
    public function getParameter()
    {
        return $this->container['parameter'];
    }

    /**
     * Sets parameter
     *
     * @param string|null $parameter As a group's name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by `notificationType` value. So, when `notificationType` is:   *  `User` The `parameter` is the user account ID.  *  `Group` The `parameter` is the group name.  *  `ProjectRole` The `parameter` is the project role ID.  *  `UserCustomField` The `parameter` is the ID of the custom field.  *  `GroupCustomField` The `parameter` is the ID of the custom field.
     *
     * @return self
     */
    public function setParameter($parameter)
    {

        if (is_null($parameter)) {
            throw new \InvalidArgumentException('non-nullable parameter cannot be null');
        }

        $this->container['parameter'] = $parameter;

        return $this;
    }

    /**
     * Gets project_role
     *
     * @return \OpenAPI\Client\Model\EventNotificationProjectRole|null
     */
    public function getProjectRole()
    {
        return $this->container['project_role'];
    }

    /**
     * Sets project_role
     *
     * @param \OpenAPI\Client\Model\EventNotificationProjectRole|null $project_role project_role
     *
     * @return self
     */
    public function setProjectRole($project_role)
    {

        if (is_null($project_role)) {
            throw new \InvalidArgumentException('non-nullable project_role cannot be null');
        }

        $this->container['project_role'] = $project_role;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return string|null
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param string|null $recipient The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by the `notificationType` value. So, when `notificationType` is:   *  `User`, `recipient` is the user account ID.  *  `Group`, `recipient` is the group ID.  *  `ProjectRole`, `recipient` is the project role ID.  *  `UserCustomField`, `recipient` is the ID of the custom field.  *  `GroupCustomField`, `recipient` is the ID of the custom field.
     *
     * @return self
     */
    public function setRecipient($recipient)
    {

        if (is_null($recipient)) {
            throw new \InvalidArgumentException('non-nullable recipient cannot be null');
        }

        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\EventNotificationUser|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\EventNotificationUser|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {

        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }

        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


