<?php
/**
 * IssueBean
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IssueBean Class Doc Comment
 *
 * @category Class
 * @description Details about an issue.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IssueBean implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IssueBean';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'changelog' => '\OpenAPI\Client\Model\IssueBeanChangelog',
        'editmeta' => '\OpenAPI\Client\Model\IssueBeanEditmeta',
        'expand' => 'string',
        'fields' => 'array<string,mixed>',
        'fields_to_include' => '\OpenAPI\Client\Model\IncludedFields',
        'id' => 'string',
        'key' => 'string',
        'names' => 'array<string,string>',
        'operations' => '\OpenAPI\Client\Model\IssueBeanOperations',
        'properties' => 'array<string,mixed>',
        'rendered_fields' => 'array<string,mixed>',
        'schema' => 'array<string,\OpenAPI\Client\Model\JsonTypeBean>',
        'self' => 'string',
        'transitions' => '\OpenAPI\Client\Model\IssueTransition[]',
        'versioned_representations' => 'array<string,array<string,mixed>>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'changelog' => null,
        'editmeta' => null,
        'expand' => null,
        'fields' => null,
        'fields_to_include' => null,
        'id' => null,
        'key' => null,
        'names' => null,
        'operations' => null,
        'properties' => null,
        'rendered_fields' => null,
        'schema' => null,
        'self' => 'uri',
        'transitions' => null,
        'versioned_representations' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'changelog' => false,
		'editmeta' => false,
		'expand' => false,
		'fields' => false,
		'fields_to_include' => false,
		'id' => false,
		'key' => false,
		'names' => false,
		'operations' => false,
		'properties' => false,
		'rendered_fields' => false,
		'schema' => false,
		'self' => false,
		'transitions' => false,
		'versioned_representations' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'changelog' => 'changelog',
        'editmeta' => 'editmeta',
        'expand' => 'expand',
        'fields' => 'fields',
        'fields_to_include' => 'fieldsToInclude',
        'id' => 'id',
        'key' => 'key',
        'names' => 'names',
        'operations' => 'operations',
        'properties' => 'properties',
        'rendered_fields' => 'renderedFields',
        'schema' => 'schema',
        'self' => 'self',
        'transitions' => 'transitions',
        'versioned_representations' => 'versionedRepresentations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'changelog' => 'setChangelog',
        'editmeta' => 'setEditmeta',
        'expand' => 'setExpand',
        'fields' => 'setFields',
        'fields_to_include' => 'setFieldsToInclude',
        'id' => 'setId',
        'key' => 'setKey',
        'names' => 'setNames',
        'operations' => 'setOperations',
        'properties' => 'setProperties',
        'rendered_fields' => 'setRenderedFields',
        'schema' => 'setSchema',
        'self' => 'setSelf',
        'transitions' => 'setTransitions',
        'versioned_representations' => 'setVersionedRepresentations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'changelog' => 'getChangelog',
        'editmeta' => 'getEditmeta',
        'expand' => 'getExpand',
        'fields' => 'getFields',
        'fields_to_include' => 'getFieldsToInclude',
        'id' => 'getId',
        'key' => 'getKey',
        'names' => 'getNames',
        'operations' => 'getOperations',
        'properties' => 'getProperties',
        'rendered_fields' => 'getRenderedFields',
        'schema' => 'getSchema',
        'self' => 'getSelf',
        'transitions' => 'getTransitions',
        'versioned_representations' => 'getVersionedRepresentations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('changelog', $data ?? [], null);
        $this->setIfExists('editmeta', $data ?? [], null);
        $this->setIfExists('expand', $data ?? [], null);
        $this->setIfExists('fields', $data ?? [], null);
        $this->setIfExists('fields_to_include', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('names', $data ?? [], null);
        $this->setIfExists('operations', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], null);
        $this->setIfExists('rendered_fields', $data ?? [], null);
        $this->setIfExists('schema', $data ?? [], null);
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('transitions', $data ?? [], null);
        $this->setIfExists('versioned_representations', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets changelog
     *
     * @return \OpenAPI\Client\Model\IssueBeanChangelog|null
     */
    public function getChangelog()
    {
        return $this->container['changelog'];
    }

    /**
     * Sets changelog
     *
     * @param \OpenAPI\Client\Model\IssueBeanChangelog|null $changelog changelog
     *
     * @return self
     */
    public function setChangelog($changelog)
    {

        if (is_null($changelog)) {
            throw new \InvalidArgumentException('non-nullable changelog cannot be null');
        }

        $this->container['changelog'] = $changelog;

        return $this;
    }

    /**
     * Gets editmeta
     *
     * @return \OpenAPI\Client\Model\IssueBeanEditmeta|null
     */
    public function getEditmeta()
    {
        return $this->container['editmeta'];
    }

    /**
     * Sets editmeta
     *
     * @param \OpenAPI\Client\Model\IssueBeanEditmeta|null $editmeta editmeta
     *
     * @return self
     */
    public function setEditmeta($editmeta)
    {

        if (is_null($editmeta)) {
            throw new \InvalidArgumentException('non-nullable editmeta cannot be null');
        }

        $this->container['editmeta'] = $editmeta;

        return $this;
    }

    /**
     * Gets expand
     *
     * @return string|null
     */
    public function getExpand()
    {
        return $this->container['expand'];
    }

    /**
     * Sets expand
     *
     * @param string|null $expand Expand options that include additional issue details in the response.
     *
     * @return self
     */
    public function setExpand($expand)
    {

        if (is_null($expand)) {
            throw new \InvalidArgumentException('non-nullable expand cannot be null');
        }

        $this->container['expand'] = $expand;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return array<string,mixed>|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param array<string,mixed>|null $fields fields
     *
     * @return self
     */
    public function setFields($fields)
    {

        if (is_null($fields)) {
            throw new \InvalidArgumentException('non-nullable fields cannot be null');
        }

        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets fields_to_include
     *
     * @return \OpenAPI\Client\Model\IncludedFields|null
     */
    public function getFieldsToInclude()
    {
        return $this->container['fields_to_include'];
    }

    /**
     * Sets fields_to_include
     *
     * @param \OpenAPI\Client\Model\IncludedFields|null $fields_to_include fields_to_include
     *
     * @return self
     */
    public function setFieldsToInclude($fields_to_include)
    {

        if (is_null($fields_to_include)) {
            throw new \InvalidArgumentException('non-nullable fields_to_include cannot be null');
        }

        $this->container['fields_to_include'] = $fields_to_include;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of the issue.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key The key of the issue.
     *
     * @return self
     */
    public function setKey($key)
    {

        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }

        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets names
     *
     * @return array<string,string>|null
     */
    public function getNames()
    {
        return $this->container['names'];
    }

    /**
     * Sets names
     *
     * @param array<string,string>|null $names The ID and name of each field present on the issue.
     *
     * @return self
     */
    public function setNames($names)
    {

        if (is_null($names)) {
            throw new \InvalidArgumentException('non-nullable names cannot be null');
        }

        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets operations
     *
     * @return \OpenAPI\Client\Model\IssueBeanOperations|null
     */
    public function getOperations()
    {
        return $this->container['operations'];
    }

    /**
     * Sets operations
     *
     * @param \OpenAPI\Client\Model\IssueBeanOperations|null $operations operations
     *
     * @return self
     */
    public function setOperations($operations)
    {

        if (is_null($operations)) {
            throw new \InvalidArgumentException('non-nullable operations cannot be null');
        }

        $this->container['operations'] = $operations;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return array<string,mixed>|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param array<string,mixed>|null $properties Details of the issue properties identified in the request.
     *
     * @return self
     */
    public function setProperties($properties)
    {

        if (is_null($properties)) {
            throw new \InvalidArgumentException('non-nullable properties cannot be null');
        }

        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets rendered_fields
     *
     * @return array<string,mixed>|null
     */
    public function getRenderedFields()
    {
        return $this->container['rendered_fields'];
    }

    /**
     * Sets rendered_fields
     *
     * @param array<string,mixed>|null $rendered_fields The rendered value of each field present on the issue.
     *
     * @return self
     */
    public function setRenderedFields($rendered_fields)
    {

        if (is_null($rendered_fields)) {
            throw new \InvalidArgumentException('non-nullable rendered_fields cannot be null');
        }

        $this->container['rendered_fields'] = $rendered_fields;

        return $this;
    }

    /**
     * Gets schema
     *
     * @return array<string,\OpenAPI\Client\Model\JsonTypeBean>|null
     */
    public function getSchema()
    {
        return $this->container['schema'];
    }

    /**
     * Sets schema
     *
     * @param array<string,\OpenAPI\Client\Model\JsonTypeBean>|null $schema The schema describing each field present on the issue.
     *
     * @return self
     */
    public function setSchema($schema)
    {

        if (is_null($schema)) {
            throw new \InvalidArgumentException('non-nullable schema cannot be null');
        }

        $this->container['schema'] = $schema;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string|null $self The URL of the issue details.
     *
     * @return self
     */
    public function setSelf($self)
    {

        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }

        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets transitions
     *
     * @return \OpenAPI\Client\Model\IssueTransition[]|null
     */
    public function getTransitions()
    {
        return $this->container['transitions'];
    }

    /**
     * Sets transitions
     *
     * @param \OpenAPI\Client\Model\IssueTransition[]|null $transitions The transitions that can be performed on the issue.
     *
     * @return self
     */
    public function setTransitions($transitions)
    {

        if (is_null($transitions)) {
            throw new \InvalidArgumentException('non-nullable transitions cannot be null');
        }

        $this->container['transitions'] = $transitions;

        return $this;
    }

    /**
     * Gets versioned_representations
     *
     * @return array<string,array<string,mixed>>|null
     */
    public function getVersionedRepresentations()
    {
        return $this->container['versioned_representations'];
    }

    /**
     * Sets versioned_representations
     *
     * @param array<string,array<string,mixed>>|null $versioned_representations The versions of each field on the issue.
     *
     * @return self
     */
    public function setVersionedRepresentations($versioned_representations)
    {

        if (is_null($versioned_representations)) {
            throw new \InvalidArgumentException('non-nullable versioned_representations cannot be null');
        }

        $this->container['versioned_representations'] = $versioned_representations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


