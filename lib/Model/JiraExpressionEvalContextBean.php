<?php
/**
 * JiraExpressionEvalContextBean
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * JiraExpressionEvalContextBean Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class JiraExpressionEvalContextBean implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'JiraExpressionEvalContextBean';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'board' => 'int',
        'custom' => '\OpenAPI\Client\Model\CustomContextVariable[]',
        'customer_request' => 'int',
        'issue' => '\OpenAPI\Client\Model\JiraExpressionEvalContextBeanIssue',
        'issues' => '\OpenAPI\Client\Model\JiraExpressionEvalContextBeanIssues',
        'project' => '\OpenAPI\Client\Model\JiraExpressionEvalContextBeanProject',
        'service_desk' => 'int',
        'sprint' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'board' => 'int64',
        'custom' => null,
        'customer_request' => 'int64',
        'issue' => null,
        'issues' => null,
        'project' => null,
        'service_desk' => 'int64',
        'sprint' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'board' => false,
		'custom' => false,
		'customer_request' => false,
		'issue' => false,
		'issues' => false,
		'project' => false,
		'service_desk' => false,
		'sprint' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'board' => 'board',
        'custom' => 'custom',
        'customer_request' => 'customerRequest',
        'issue' => 'issue',
        'issues' => 'issues',
        'project' => 'project',
        'service_desk' => 'serviceDesk',
        'sprint' => 'sprint'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'board' => 'setBoard',
        'custom' => 'setCustom',
        'customer_request' => 'setCustomerRequest',
        'issue' => 'setIssue',
        'issues' => 'setIssues',
        'project' => 'setProject',
        'service_desk' => 'setServiceDesk',
        'sprint' => 'setSprint'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'board' => 'getBoard',
        'custom' => 'getCustom',
        'customer_request' => 'getCustomerRequest',
        'issue' => 'getIssue',
        'issues' => 'getIssues',
        'project' => 'getProject',
        'service_desk' => 'getServiceDesk',
        'sprint' => 'getSprint'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('board', $data ?? [], null);
        $this->setIfExists('custom', $data ?? [], null);
        $this->setIfExists('customer_request', $data ?? [], null);
        $this->setIfExists('issue', $data ?? [], null);
        $this->setIfExists('issues', $data ?? [], null);
        $this->setIfExists('project', $data ?? [], null);
        $this->setIfExists('service_desk', $data ?? [], null);
        $this->setIfExists('sprint', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets board
     *
     * @return int|null
     */
    public function getBoard()
    {
        return $this->container['board'];
    }

    /**
     * Sets board
     *
     * @param int|null $board The ID of the board that is available under the `board` variable when evaluating the expression.
     *
     * @return self
     */
    public function setBoard($board)
    {

        if (is_null($board)) {
            throw new \InvalidArgumentException('non-nullable board cannot be null');
        }

        $this->container['board'] = $board;

        return $this;
    }

    /**
     * Gets custom
     *
     * @return \OpenAPI\Client\Model\CustomContextVariable[]|null
     */
    public function getCustom()
    {
        return $this->container['custom'];
    }

    /**
     * Sets custom
     *
     * @param \OpenAPI\Client\Model\CustomContextVariable[]|null $custom Custom context variables and their types. These variable types are available for use in a custom context:   *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.  *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.  *  `json`: A JSON object containing custom content.  *  `list`: A JSON list of `user`, `issue`, or `json` variable types.
     *
     * @return self
     */
    public function setCustom($custom)
    {

        if (is_null($custom)) {
            throw new \InvalidArgumentException('non-nullable custom cannot be null');
        }

        $this->container['custom'] = $custom;

        return $this;
    }

    /**
     * Gets customer_request
     *
     * @return int|null
     */
    public function getCustomerRequest()
    {
        return $this->container['customer_request'];
    }

    /**
     * Sets customer_request
     *
     * @param int|null $customer_request The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.
     *
     * @return self
     */
    public function setCustomerRequest($customer_request)
    {

        if (is_null($customer_request)) {
            throw new \InvalidArgumentException('non-nullable customer_request cannot be null');
        }

        $this->container['customer_request'] = $customer_request;

        return $this;
    }

    /**
     * Gets issue
     *
     * @return \OpenAPI\Client\Model\JiraExpressionEvalContextBeanIssue|null
     */
    public function getIssue()
    {
        return $this->container['issue'];
    }

    /**
     * Sets issue
     *
     * @param \OpenAPI\Client\Model\JiraExpressionEvalContextBeanIssue|null $issue issue
     *
     * @return self
     */
    public function setIssue($issue)
    {

        if (is_null($issue)) {
            throw new \InvalidArgumentException('non-nullable issue cannot be null');
        }

        $this->container['issue'] = $issue;

        return $this;
    }

    /**
     * Gets issues
     *
     * @return \OpenAPI\Client\Model\JiraExpressionEvalContextBeanIssues|null
     */
    public function getIssues()
    {
        return $this->container['issues'];
    }

    /**
     * Sets issues
     *
     * @param \OpenAPI\Client\Model\JiraExpressionEvalContextBeanIssues|null $issues issues
     *
     * @return self
     */
    public function setIssues($issues)
    {

        if (is_null($issues)) {
            throw new \InvalidArgumentException('non-nullable issues cannot be null');
        }

        $this->container['issues'] = $issues;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \OpenAPI\Client\Model\JiraExpressionEvalContextBeanProject|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \OpenAPI\Client\Model\JiraExpressionEvalContextBeanProject|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {

        if (is_null($project)) {
            throw new \InvalidArgumentException('non-nullable project cannot be null');
        }

        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets service_desk
     *
     * @return int|null
     */
    public function getServiceDesk()
    {
        return $this->container['service_desk'];
    }

    /**
     * Sets service_desk
     *
     * @param int|null $service_desk The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.
     *
     * @return self
     */
    public function setServiceDesk($service_desk)
    {

        if (is_null($service_desk)) {
            throw new \InvalidArgumentException('non-nullable service_desk cannot be null');
        }

        $this->container['service_desk'] = $service_desk;

        return $this;
    }

    /**
     * Gets sprint
     *
     * @return int|null
     */
    public function getSprint()
    {
        return $this->container['sprint'];
    }

    /**
     * Sets sprint
     *
     * @param int|null $sprint The ID of the sprint that is available under the `sprint` variable when evaluating the expression.
     *
     * @return self
     */
    public function setSprint($sprint)
    {

        if (is_null($sprint)) {
            throw new \InvalidArgumentException('non-nullable sprint cannot be null');
        }

        $this->container['sprint'] = $sprint;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


