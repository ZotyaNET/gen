<?php
/**
 * TransitionUpdateDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransitionUpdateDTO Class Doc Comment
 *
 * @category Class
 * @description The transitions of this workflow.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransitionUpdateDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransitionUpdateDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actions' => '\OpenAPI\Client\Model\WorkflowRuleConfiguration[]',
        'conditions' => '\OpenAPI\Client\Model\ConditionGroupUpdate',
        'custom_issue_event_id' => 'string',
        'description' => 'string',
        'from' => '\OpenAPI\Client\Model\StatusReferenceAndPort[]',
        'id' => 'string',
        'name' => 'string',
        'properties' => 'array<string,string>',
        'to' => '\OpenAPI\Client\Model\StatusReferenceAndPort',
        'transition_screen' => '\OpenAPI\Client\Model\WorkflowRuleConfiguration',
        'triggers' => '\OpenAPI\Client\Model\WorkflowTrigger[]',
        'type' => 'string',
        'validators' => '\OpenAPI\Client\Model\WorkflowRuleConfiguration[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'actions' => null,
        'conditions' => null,
        'custom_issue_event_id' => null,
        'description' => null,
        'from' => null,
        'id' => null,
        'name' => null,
        'properties' => null,
        'to' => null,
        'transition_screen' => null,
        'triggers' => null,
        'type' => null,
        'validators' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'actions' => false,
		'conditions' => true,
		'custom_issue_event_id' => false,
		'description' => false,
		'from' => false,
		'id' => false,
		'name' => false,
		'properties' => false,
		'to' => true,
		'transition_screen' => true,
		'triggers' => false,
		'type' => false,
		'validators' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actions' => 'actions',
        'conditions' => 'conditions',
        'custom_issue_event_id' => 'customIssueEventId',
        'description' => 'description',
        'from' => 'from',
        'id' => 'id',
        'name' => 'name',
        'properties' => 'properties',
        'to' => 'to',
        'transition_screen' => 'transitionScreen',
        'triggers' => 'triggers',
        'type' => 'type',
        'validators' => 'validators'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actions' => 'setActions',
        'conditions' => 'setConditions',
        'custom_issue_event_id' => 'setCustomIssueEventId',
        'description' => 'setDescription',
        'from' => 'setFrom',
        'id' => 'setId',
        'name' => 'setName',
        'properties' => 'setProperties',
        'to' => 'setTo',
        'transition_screen' => 'setTransitionScreen',
        'triggers' => 'setTriggers',
        'type' => 'setType',
        'validators' => 'setValidators'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actions' => 'getActions',
        'conditions' => 'getConditions',
        'custom_issue_event_id' => 'getCustomIssueEventId',
        'description' => 'getDescription',
        'from' => 'getFrom',
        'id' => 'getId',
        'name' => 'getName',
        'properties' => 'getProperties',
        'to' => 'getTo',
        'transition_screen' => 'getTransitionScreen',
        'triggers' => 'getTriggers',
        'type' => 'getType',
        'validators' => 'getValidators'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_INITIAL = 'INITIAL';
    public const TYPE__GLOBAL = 'GLOBAL';
    public const TYPE_DIRECTED = 'DIRECTED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_INITIAL,
            self::TYPE__GLOBAL,
            self::TYPE_DIRECTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('actions', $data ?? [], null);
        $this->setIfExists('conditions', $data ?? [], null);
        $this->setIfExists('custom_issue_event_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('transition_screen', $data ?? [], null);
        $this->setIfExists('triggers', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('validators', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actions
     *
     * @return \OpenAPI\Client\Model\WorkflowRuleConfiguration[]|null
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param \OpenAPI\Client\Model\WorkflowRuleConfiguration[]|null $actions The post-functions of the transition.
     *
     * @return self
     */
    public function setActions($actions)
    {

        if (is_null($actions)) {
            throw new \InvalidArgumentException('non-nullable actions cannot be null');
        }

        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \OpenAPI\Client\Model\ConditionGroupUpdate|null
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \OpenAPI\Client\Model\ConditionGroupUpdate|null $conditions conditions
     *
     * @return self
     */
    public function setConditions($conditions)
    {

        if (is_null($conditions)) {
            array_push($this->openAPINullablesSetToNull, 'conditions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('conditions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets custom_issue_event_id
     *
     * @return string|null
     */
    public function getCustomIssueEventId()
    {
        return $this->container['custom_issue_event_id'];
    }

    /**
     * Sets custom_issue_event_id
     *
     * @param string|null $custom_issue_event_id The custom event ID of the transition.
     *
     * @return self
     */
    public function setCustomIssueEventId($custom_issue_event_id)
    {

        if (is_null($custom_issue_event_id)) {
            throw new \InvalidArgumentException('non-nullable custom_issue_event_id cannot be null');
        }

        $this->container['custom_issue_event_id'] = $custom_issue_event_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the transition.
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets from
     *
     * @return \OpenAPI\Client\Model\StatusReferenceAndPort[]|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param \OpenAPI\Client\Model\StatusReferenceAndPort[]|null $from The statuses the transition can start from.
     *
     * @return self
     */
    public function setFrom($from)
    {

        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }

        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID of the transition.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the transition.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return array<string,string>|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param array<string,string>|null $properties The properties of the transition.
     *
     * @return self
     */
    public function setProperties($properties)
    {

        if (is_null($properties)) {
            throw new \InvalidArgumentException('non-nullable properties cannot be null');
        }

        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets to
     *
     * @return \OpenAPI\Client\Model\StatusReferenceAndPort|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param \OpenAPI\Client\Model\StatusReferenceAndPort|null $to to
     *
     * @return self
     */
    public function setTo($to)
    {

        if (is_null($to)) {
            array_push($this->openAPINullablesSetToNull, 'to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets transition_screen
     *
     * @return \OpenAPI\Client\Model\WorkflowRuleConfiguration|null
     */
    public function getTransitionScreen()
    {
        return $this->container['transition_screen'];
    }

    /**
     * Sets transition_screen
     *
     * @param \OpenAPI\Client\Model\WorkflowRuleConfiguration|null $transition_screen transition_screen
     *
     * @return self
     */
    public function setTransitionScreen($transition_screen)
    {

        if (is_null($transition_screen)) {
            array_push($this->openAPINullablesSetToNull, 'transition_screen');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transition_screen', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['transition_screen'] = $transition_screen;

        return $this;
    }

    /**
     * Gets triggers
     *
     * @return \OpenAPI\Client\Model\WorkflowTrigger[]|null
     */
    public function getTriggers()
    {
        return $this->container['triggers'];
    }

    /**
     * Sets triggers
     *
     * @param \OpenAPI\Client\Model\WorkflowTrigger[]|null $triggers The triggers of the transition.
     *
     * @return self
     */
    public function setTriggers($triggers)
    {

        if (is_null($triggers)) {
            throw new \InvalidArgumentException('non-nullable triggers cannot be null');
        }

        $this->container['triggers'] = $triggers;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The transition type.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets validators
     *
     * @return \OpenAPI\Client\Model\WorkflowRuleConfiguration[]|null
     */
    public function getValidators()
    {
        return $this->container['validators'];
    }

    /**
     * Sets validators
     *
     * @param \OpenAPI\Client\Model\WorkflowRuleConfiguration[]|null $validators The validators of the transition.
     *
     * @return self
     */
    public function setValidators($validators)
    {

        if (is_null($validators)) {
            throw new \InvalidArgumentException('non-nullable validators cannot be null');
        }

        $this->container['validators'] = $validators;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


