<?php
/**
 * Field
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Field Class Doc Comment
 *
 * @category Class
 * @description Details of a field.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Field implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Field';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contexts_count' => 'int',
        'description' => 'string',
        'id' => 'string',
        'is_locked' => 'bool',
        'is_unscreenable' => 'bool',
        'key' => 'string',
        'last_used' => '\OpenAPI\Client\Model\FieldLastUsed',
        'name' => 'string',
        'projects_count' => 'int',
        'schema' => '\OpenAPI\Client\Model\JsonTypeBean',
        'screens_count' => 'int',
        'searcher_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contexts_count' => 'int64',
        'description' => null,
        'id' => null,
        'is_locked' => null,
        'is_unscreenable' => null,
        'key' => null,
        'last_used' => null,
        'name' => null,
        'projects_count' => 'int64',
        'schema' => null,
        'screens_count' => 'int64',
        'searcher_key' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'contexts_count' => false,
		'description' => false,
		'id' => false,
		'is_locked' => false,
		'is_unscreenable' => false,
		'key' => false,
		'last_used' => false,
		'name' => false,
		'projects_count' => false,
		'schema' => false,
		'screens_count' => false,
		'searcher_key' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contexts_count' => 'contextsCount',
        'description' => 'description',
        'id' => 'id',
        'is_locked' => 'isLocked',
        'is_unscreenable' => 'isUnscreenable',
        'key' => 'key',
        'last_used' => 'lastUsed',
        'name' => 'name',
        'projects_count' => 'projectsCount',
        'schema' => 'schema',
        'screens_count' => 'screensCount',
        'searcher_key' => 'searcherKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contexts_count' => 'setContextsCount',
        'description' => 'setDescription',
        'id' => 'setId',
        'is_locked' => 'setIsLocked',
        'is_unscreenable' => 'setIsUnscreenable',
        'key' => 'setKey',
        'last_used' => 'setLastUsed',
        'name' => 'setName',
        'projects_count' => 'setProjectsCount',
        'schema' => 'setSchema',
        'screens_count' => 'setScreensCount',
        'searcher_key' => 'setSearcherKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contexts_count' => 'getContextsCount',
        'description' => 'getDescription',
        'id' => 'getId',
        'is_locked' => 'getIsLocked',
        'is_unscreenable' => 'getIsUnscreenable',
        'key' => 'getKey',
        'last_used' => 'getLastUsed',
        'name' => 'getName',
        'projects_count' => 'getProjectsCount',
        'schema' => 'getSchema',
        'screens_count' => 'getScreensCount',
        'searcher_key' => 'getSearcherKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('contexts_count', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_locked', $data ?? [], null);
        $this->setIfExists('is_unscreenable', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('last_used', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('projects_count', $data ?? [], null);
        $this->setIfExists('schema', $data ?? [], null);
        $this->setIfExists('screens_count', $data ?? [], null);
        $this->setIfExists('searcher_key', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['schema'] === null) {
            $invalidProperties[] = "'schema' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contexts_count
     *
     * @return int|null
     */
    public function getContextsCount()
    {
        return $this->container['contexts_count'];
    }

    /**
     * Sets contexts_count
     *
     * @param int|null $contexts_count Number of contexts where the field is used.
     *
     * @return self
     */
    public function setContextsCount($contexts_count)
    {

        if (is_null($contexts_count)) {
            throw new \InvalidArgumentException('non-nullable contexts_count cannot be null');
        }

        $this->container['contexts_count'] = $contexts_count;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the field.
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID of the field.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_locked
     *
     * @return bool|null
     */
    public function getIsLocked()
    {
        return $this->container['is_locked'];
    }

    /**
     * Sets is_locked
     *
     * @param bool|null $is_locked Whether the field is locked.
     *
     * @return self
     */
    public function setIsLocked($is_locked)
    {

        if (is_null($is_locked)) {
            throw new \InvalidArgumentException('non-nullable is_locked cannot be null');
        }

        $this->container['is_locked'] = $is_locked;

        return $this;
    }

    /**
     * Gets is_unscreenable
     *
     * @return bool|null
     */
    public function getIsUnscreenable()
    {
        return $this->container['is_unscreenable'];
    }

    /**
     * Sets is_unscreenable
     *
     * @param bool|null $is_unscreenable Whether the field is shown on screen or not.
     *
     * @return self
     */
    public function setIsUnscreenable($is_unscreenable)
    {

        if (is_null($is_unscreenable)) {
            throw new \InvalidArgumentException('non-nullable is_unscreenable cannot be null');
        }

        $this->container['is_unscreenable'] = $is_unscreenable;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key The key of the field.
     *
     * @return self
     */
    public function setKey($key)
    {

        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }

        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets last_used
     *
     * @return \OpenAPI\Client\Model\FieldLastUsed|null
     */
    public function getLastUsed()
    {
        return $this->container['last_used'];
    }

    /**
     * Sets last_used
     *
     * @param \OpenAPI\Client\Model\FieldLastUsed|null $last_used last_used
     *
     * @return self
     */
    public function setLastUsed($last_used)
    {

        if (is_null($last_used)) {
            throw new \InvalidArgumentException('non-nullable last_used cannot be null');
        }

        $this->container['last_used'] = $last_used;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the field.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets projects_count
     *
     * @return int|null
     */
    public function getProjectsCount()
    {
        return $this->container['projects_count'];
    }

    /**
     * Sets projects_count
     *
     * @param int|null $projects_count Number of projects where the field is used.
     *
     * @return self
     */
    public function setProjectsCount($projects_count)
    {

        if (is_null($projects_count)) {
            throw new \InvalidArgumentException('non-nullable projects_count cannot be null');
        }

        $this->container['projects_count'] = $projects_count;

        return $this;
    }

    /**
     * Gets schema
     *
     * @return \OpenAPI\Client\Model\JsonTypeBean
     */
    public function getSchema()
    {
        return $this->container['schema'];
    }

    /**
     * Sets schema
     *
     * @param \OpenAPI\Client\Model\JsonTypeBean $schema schema
     *
     * @return self
     */
    public function setSchema($schema)
    {

        if (is_null($schema)) {
            throw new \InvalidArgumentException('non-nullable schema cannot be null');
        }

        $this->container['schema'] = $schema;

        return $this;
    }

    /**
     * Gets screens_count
     *
     * @return int|null
     */
    public function getScreensCount()
    {
        return $this->container['screens_count'];
    }

    /**
     * Sets screens_count
     *
     * @param int|null $screens_count Number of screens where the field is used.
     *
     * @return self
     */
    public function setScreensCount($screens_count)
    {

        if (is_null($screens_count)) {
            throw new \InvalidArgumentException('non-nullable screens_count cannot be null');
        }

        $this->container['screens_count'] = $screens_count;

        return $this;
    }

    /**
     * Gets searcher_key
     *
     * @return string|null
     */
    public function getSearcherKey()
    {
        return $this->container['searcher_key'];
    }

    /**
     * Sets searcher_key
     *
     * @param string|null $searcher_key The searcher key of the field. Returned for custom fields.
     *
     * @return self
     */
    public function setSearcherKey($searcher_key)
    {

        if (is_null($searcher_key)) {
            throw new \InvalidArgumentException('non-nullable searcher_key cannot be null');
        }

        $this->container['searcher_key'] = $searcher_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


