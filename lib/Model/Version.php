<?php
/**
 * Version
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Version Class Doc Comment
 *
 * @category Class
 * @description Details about a project version.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Version implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Version';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'archived' => 'bool',
        'description' => 'string',
        'expand' => 'string',
        'id' => 'string',
        'issues_status_for_fix_version' => '\OpenAPI\Client\Model\VersionIssuesStatusForFixVersion',
        'move_unfixed_issues_to' => 'string',
        'name' => 'string',
        'operations' => '\OpenAPI\Client\Model\SimpleLink[]',
        'overdue' => 'bool',
        'project' => 'string',
        'project_id' => 'int',
        'release_date' => '\DateTime',
        'released' => 'bool',
        'self' => 'string',
        'start_date' => '\DateTime',
        'user_release_date' => 'string',
        'user_start_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'archived' => null,
        'description' => null,
        'expand' => null,
        'id' => null,
        'issues_status_for_fix_version' => null,
        'move_unfixed_issues_to' => 'uri',
        'name' => null,
        'operations' => null,
        'overdue' => null,
        'project' => null,
        'project_id' => 'int64',
        'release_date' => 'date',
        'released' => null,
        'self' => 'uri',
        'start_date' => 'date',
        'user_release_date' => null,
        'user_start_date' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'archived' => false,
		'description' => false,
		'expand' => false,
		'id' => false,
		'issues_status_for_fix_version' => false,
		'move_unfixed_issues_to' => false,
		'name' => false,
		'operations' => false,
		'overdue' => false,
		'project' => false,
		'project_id' => false,
		'release_date' => false,
		'released' => false,
		'self' => false,
		'start_date' => false,
		'user_release_date' => false,
		'user_start_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'archived' => 'archived',
        'description' => 'description',
        'expand' => 'expand',
        'id' => 'id',
        'issues_status_for_fix_version' => 'issuesStatusForFixVersion',
        'move_unfixed_issues_to' => 'moveUnfixedIssuesTo',
        'name' => 'name',
        'operations' => 'operations',
        'overdue' => 'overdue',
        'project' => 'project',
        'project_id' => 'projectId',
        'release_date' => 'releaseDate',
        'released' => 'released',
        'self' => 'self',
        'start_date' => 'startDate',
        'user_release_date' => 'userReleaseDate',
        'user_start_date' => 'userStartDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'archived' => 'setArchived',
        'description' => 'setDescription',
        'expand' => 'setExpand',
        'id' => 'setId',
        'issues_status_for_fix_version' => 'setIssuesStatusForFixVersion',
        'move_unfixed_issues_to' => 'setMoveUnfixedIssuesTo',
        'name' => 'setName',
        'operations' => 'setOperations',
        'overdue' => 'setOverdue',
        'project' => 'setProject',
        'project_id' => 'setProjectId',
        'release_date' => 'setReleaseDate',
        'released' => 'setReleased',
        'self' => 'setSelf',
        'start_date' => 'setStartDate',
        'user_release_date' => 'setUserReleaseDate',
        'user_start_date' => 'setUserStartDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'archived' => 'getArchived',
        'description' => 'getDescription',
        'expand' => 'getExpand',
        'id' => 'getId',
        'issues_status_for_fix_version' => 'getIssuesStatusForFixVersion',
        'move_unfixed_issues_to' => 'getMoveUnfixedIssuesTo',
        'name' => 'getName',
        'operations' => 'getOperations',
        'overdue' => 'getOverdue',
        'project' => 'getProject',
        'project_id' => 'getProjectId',
        'release_date' => 'getReleaseDate',
        'released' => 'getReleased',
        'self' => 'getSelf',
        'start_date' => 'getStartDate',
        'user_release_date' => 'getUserReleaseDate',
        'user_start_date' => 'getUserStartDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('expand', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('issues_status_for_fix_version', $data ?? [], null);
        $this->setIfExists('move_unfixed_issues_to', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('operations', $data ?? [], null);
        $this->setIfExists('overdue', $data ?? [], null);
        $this->setIfExists('project', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('release_date', $data ?? [], null);
        $this->setIfExists('released', $data ?? [], null);
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('user_release_date', $data ?? [], null);
        $this->setIfExists('user_start_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived Indicates that the version is archived. Optional when creating or updating a version.
     *
     * @return self
     */
    public function setArchived($archived)
    {

        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }

        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the version. Optional when creating or updating a version.
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets expand
     *
     * @return string|null
     */
    public function getExpand()
    {
        return $this->container['expand'];
    }

    /**
     * Sets expand
     *
     * @param string|null $expand Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  `operations` Returns the list of operations available for this version.  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  Optional for create and update.
     *
     * @return self
     */
    public function setExpand($expand)
    {

        if (is_null($expand)) {
            throw new \InvalidArgumentException('non-nullable expand cannot be null');
        }

        $this->container['expand'] = $expand;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of the version.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets issues_status_for_fix_version
     *
     * @return \OpenAPI\Client\Model\VersionIssuesStatusForFixVersion|null
     */
    public function getIssuesStatusForFixVersion()
    {
        return $this->container['issues_status_for_fix_version'];
    }

    /**
     * Sets issues_status_for_fix_version
     *
     * @param \OpenAPI\Client\Model\VersionIssuesStatusForFixVersion|null $issues_status_for_fix_version issues_status_for_fix_version
     *
     * @return self
     */
    public function setIssuesStatusForFixVersion($issues_status_for_fix_version)
    {

        if (is_null($issues_status_for_fix_version)) {
            throw new \InvalidArgumentException('non-nullable issues_status_for_fix_version cannot be null');
        }

        $this->container['issues_status_for_fix_version'] = $issues_status_for_fix_version;

        return $this;
    }

    /**
     * Gets move_unfixed_issues_to
     *
     * @return string|null
     */
    public function getMoveUnfixedIssuesTo()
    {
        return $this->container['move_unfixed_issues_to'];
    }

    /**
     * Sets move_unfixed_issues_to
     *
     * @param string|null $move_unfixed_issues_to The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
     *
     * @return self
     */
    public function setMoveUnfixedIssuesTo($move_unfixed_issues_to)
    {

        if (is_null($move_unfixed_issues_to)) {
            throw new \InvalidArgumentException('non-nullable move_unfixed_issues_to cannot be null');
        }

        $this->container['move_unfixed_issues_to'] = $move_unfixed_issues_to;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets operations
     *
     * @return \OpenAPI\Client\Model\SimpleLink[]|null
     */
    public function getOperations()
    {
        return $this->container['operations'];
    }

    /**
     * Sets operations
     *
     * @param \OpenAPI\Client\Model\SimpleLink[]|null $operations If the expand option `operations` is used, returns the list of operations available for this version.
     *
     * @return self
     */
    public function setOperations($operations)
    {

        if (is_null($operations)) {
            throw new \InvalidArgumentException('non-nullable operations cannot be null');
        }

        $this->container['operations'] = $operations;

        return $this;
    }

    /**
     * Gets overdue
     *
     * @return bool|null
     */
    public function getOverdue()
    {
        return $this->container['overdue'];
    }

    /**
     * Sets overdue
     *
     * @param bool|null $overdue Indicates that the version is overdue.
     *
     * @return self
     */
    public function setOverdue($overdue)
    {

        if (is_null($overdue)) {
            throw new \InvalidArgumentException('non-nullable overdue cannot be null');
        }

        $this->container['overdue'] = $overdue;

        return $this;
    }

    /**
     * Gets project
     *
     * @return string|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param string|null $project Deprecated. Use `projectId`.
     *
     * @return self
     */
    public function setProject($project)
    {

        if (is_null($project)) {
            throw new \InvalidArgumentException('non-nullable project cannot be null');
        }

        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int|null $project_id The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
     *
     * @return self
     */
    public function setProjectId($project_id)
    {

        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }

        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets release_date
     *
     * @return \DateTime|null
     */
    public function getReleaseDate()
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     *
     * @param \DateTime|null $release_date The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
     *
     * @return self
     */
    public function setReleaseDate($release_date)
    {

        if (is_null($release_date)) {
            throw new \InvalidArgumentException('non-nullable release_date cannot be null');
        }

        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets released
     *
     * @return bool|null
     */
    public function getReleased()
    {
        return $this->container['released'];
    }

    /**
     * Sets released
     *
     * @param bool|null $released Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.
     *
     * @return self
     */
    public function setReleased($released)
    {

        if (is_null($released)) {
            throw new \InvalidArgumentException('non-nullable released cannot be null');
        }

        $this->container['released'] = $released;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string|null $self The URL of the version.
     *
     * @return self
     */
    public function setSelf($self)
    {

        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }

        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {

        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }

        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets user_release_date
     *
     * @return string|null
     */
    public function getUserReleaseDate()
    {
        return $this->container['user_release_date'];
    }

    /**
     * Sets user_release_date
     *
     * @param string|null $user_release_date The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.
     *
     * @return self
     */
    public function setUserReleaseDate($user_release_date)
    {

        if (is_null($user_release_date)) {
            throw new \InvalidArgumentException('non-nullable user_release_date cannot be null');
        }

        $this->container['user_release_date'] = $user_release_date;

        return $this;
    }

    /**
     * Gets user_start_date
     *
     * @return string|null
     */
    public function getUserStartDate()
    {
        return $this->container['user_start_date'];
    }

    /**
     * Sets user_start_date
     *
     * @param string|null $user_start_date The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.
     *
     * @return self
     */
    public function setUserStartDate($user_start_date)
    {

        if (is_null($user_start_date)) {
            throw new \InvalidArgumentException('non-nullable user_start_date cannot be null');
        }

        $this->container['user_start_date'] = $user_start_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


