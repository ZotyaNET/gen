<?php
/**
 * Project
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Project Class Doc Comment
 *
 * @category Class
 * @description Details about a project.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Project implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Project';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'archived' => 'bool',
        'archived_by' => '\OpenAPI\Client\Model\ProjectArchivedBy',
        'archived_date' => '\DateTime',
        'assignee_type' => 'string',
        'avatar_urls' => '\OpenAPI\Client\Model\ProjectAvatarUrls',
        'components' => '\OpenAPI\Client\Model\ProjectComponent[]',
        'deleted' => 'bool',
        'deleted_by' => '\OpenAPI\Client\Model\ProjectDeletedBy',
        'deleted_date' => '\DateTime',
        'description' => 'string',
        'email' => 'string',
        'expand' => 'string',
        'favourite' => 'bool',
        'id' => 'string',
        'insight' => '\OpenAPI\Client\Model\ProjectInsight',
        'is_private' => 'bool',
        'issue_type_hierarchy' => '\OpenAPI\Client\Model\ProjectIssueTypeHierarchy',
        'issue_types' => '\OpenAPI\Client\Model\IssueTypeDetails[]',
        'key' => 'string',
        'landing_page_info' => '\OpenAPI\Client\Model\ProjectLandingPageInfo',
        'lead' => '\OpenAPI\Client\Model\ProjectLead',
        'name' => 'string',
        'permissions' => '\OpenAPI\Client\Model\ProjectPermissions',
        'project_category' => '\OpenAPI\Client\Model\ProjectProjectCategory',
        'project_type_key' => 'string',
        'properties' => 'array<string,mixed>',
        'retention_till_date' => '\DateTime',
        'roles' => 'array<string,string>',
        'self' => 'string',
        'simplified' => 'bool',
        'style' => 'string',
        'url' => 'string',
        'uuid' => 'string',
        'versions' => '\OpenAPI\Client\Model\Version[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'archived' => null,
        'archived_by' => null,
        'archived_date' => 'date-time',
        'assignee_type' => null,
        'avatar_urls' => null,
        'components' => null,
        'deleted' => null,
        'deleted_by' => null,
        'deleted_date' => 'date-time',
        'description' => null,
        'email' => null,
        'expand' => null,
        'favourite' => null,
        'id' => null,
        'insight' => null,
        'is_private' => null,
        'issue_type_hierarchy' => null,
        'issue_types' => null,
        'key' => null,
        'landing_page_info' => null,
        'lead' => null,
        'name' => null,
        'permissions' => null,
        'project_category' => null,
        'project_type_key' => null,
        'properties' => null,
        'retention_till_date' => 'date-time',
        'roles' => 'uri',
        'self' => 'uri',
        'simplified' => null,
        'style' => null,
        'url' => null,
        'uuid' => 'uuid',
        'versions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'archived' => false,
		'archived_by' => false,
		'archived_date' => false,
		'assignee_type' => false,
		'avatar_urls' => false,
		'components' => false,
		'deleted' => false,
		'deleted_by' => false,
		'deleted_date' => false,
		'description' => false,
		'email' => false,
		'expand' => false,
		'favourite' => false,
		'id' => false,
		'insight' => false,
		'is_private' => false,
		'issue_type_hierarchy' => false,
		'issue_types' => false,
		'key' => false,
		'landing_page_info' => false,
		'lead' => false,
		'name' => false,
		'permissions' => false,
		'project_category' => false,
		'project_type_key' => false,
		'properties' => false,
		'retention_till_date' => false,
		'roles' => false,
		'self' => false,
		'simplified' => false,
		'style' => false,
		'url' => false,
		'uuid' => false,
		'versions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'archived' => 'archived',
        'archived_by' => 'archivedBy',
        'archived_date' => 'archivedDate',
        'assignee_type' => 'assigneeType',
        'avatar_urls' => 'avatarUrls',
        'components' => 'components',
        'deleted' => 'deleted',
        'deleted_by' => 'deletedBy',
        'deleted_date' => 'deletedDate',
        'description' => 'description',
        'email' => 'email',
        'expand' => 'expand',
        'favourite' => 'favourite',
        'id' => 'id',
        'insight' => 'insight',
        'is_private' => 'isPrivate',
        'issue_type_hierarchy' => 'issueTypeHierarchy',
        'issue_types' => 'issueTypes',
        'key' => 'key',
        'landing_page_info' => 'landingPageInfo',
        'lead' => 'lead',
        'name' => 'name',
        'permissions' => 'permissions',
        'project_category' => 'projectCategory',
        'project_type_key' => 'projectTypeKey',
        'properties' => 'properties',
        'retention_till_date' => 'retentionTillDate',
        'roles' => 'roles',
        'self' => 'self',
        'simplified' => 'simplified',
        'style' => 'style',
        'url' => 'url',
        'uuid' => 'uuid',
        'versions' => 'versions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'archived' => 'setArchived',
        'archived_by' => 'setArchivedBy',
        'archived_date' => 'setArchivedDate',
        'assignee_type' => 'setAssigneeType',
        'avatar_urls' => 'setAvatarUrls',
        'components' => 'setComponents',
        'deleted' => 'setDeleted',
        'deleted_by' => 'setDeletedBy',
        'deleted_date' => 'setDeletedDate',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'expand' => 'setExpand',
        'favourite' => 'setFavourite',
        'id' => 'setId',
        'insight' => 'setInsight',
        'is_private' => 'setIsPrivate',
        'issue_type_hierarchy' => 'setIssueTypeHierarchy',
        'issue_types' => 'setIssueTypes',
        'key' => 'setKey',
        'landing_page_info' => 'setLandingPageInfo',
        'lead' => 'setLead',
        'name' => 'setName',
        'permissions' => 'setPermissions',
        'project_category' => 'setProjectCategory',
        'project_type_key' => 'setProjectTypeKey',
        'properties' => 'setProperties',
        'retention_till_date' => 'setRetentionTillDate',
        'roles' => 'setRoles',
        'self' => 'setSelf',
        'simplified' => 'setSimplified',
        'style' => 'setStyle',
        'url' => 'setUrl',
        'uuid' => 'setUuid',
        'versions' => 'setVersions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'archived' => 'getArchived',
        'archived_by' => 'getArchivedBy',
        'archived_date' => 'getArchivedDate',
        'assignee_type' => 'getAssigneeType',
        'avatar_urls' => 'getAvatarUrls',
        'components' => 'getComponents',
        'deleted' => 'getDeleted',
        'deleted_by' => 'getDeletedBy',
        'deleted_date' => 'getDeletedDate',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'expand' => 'getExpand',
        'favourite' => 'getFavourite',
        'id' => 'getId',
        'insight' => 'getInsight',
        'is_private' => 'getIsPrivate',
        'issue_type_hierarchy' => 'getIssueTypeHierarchy',
        'issue_types' => 'getIssueTypes',
        'key' => 'getKey',
        'landing_page_info' => 'getLandingPageInfo',
        'lead' => 'getLead',
        'name' => 'getName',
        'permissions' => 'getPermissions',
        'project_category' => 'getProjectCategory',
        'project_type_key' => 'getProjectTypeKey',
        'properties' => 'getProperties',
        'retention_till_date' => 'getRetentionTillDate',
        'roles' => 'getRoles',
        'self' => 'getSelf',
        'simplified' => 'getSimplified',
        'style' => 'getStyle',
        'url' => 'getUrl',
        'uuid' => 'getUuid',
        'versions' => 'getVersions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ASSIGNEE_TYPE_PROJECT_LEAD = 'PROJECT_LEAD';
    public const ASSIGNEE_TYPE_UNASSIGNED = 'UNASSIGNED';
    public const PROJECT_TYPE_KEY_SOFTWARE = 'software';
    public const PROJECT_TYPE_KEY_SERVICE_DESK = 'service_desk';
    public const PROJECT_TYPE_KEY_BUSINESS = 'business';
    public const STYLE_CLASSIC = 'classic';
    public const STYLE_NEXT_GEN = 'next-gen';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAssigneeTypeAllowableValues()
    {
        return [
            self::ASSIGNEE_TYPE_PROJECT_LEAD,
            self::ASSIGNEE_TYPE_UNASSIGNED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProjectTypeKeyAllowableValues()
    {
        return [
            self::PROJECT_TYPE_KEY_SOFTWARE,
            self::PROJECT_TYPE_KEY_SERVICE_DESK,
            self::PROJECT_TYPE_KEY_BUSINESS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStyleAllowableValues()
    {
        return [
            self::STYLE_CLASSIC,
            self::STYLE_NEXT_GEN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('archived_by', $data ?? [], null);
        $this->setIfExists('archived_date', $data ?? [], null);
        $this->setIfExists('assignee_type', $data ?? [], null);
        $this->setIfExists('avatar_urls', $data ?? [], null);
        $this->setIfExists('components', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('deleted_by', $data ?? [], null);
        $this->setIfExists('deleted_date', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('expand', $data ?? [], null);
        $this->setIfExists('favourite', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('insight', $data ?? [], null);
        $this->setIfExists('is_private', $data ?? [], null);
        $this->setIfExists('issue_type_hierarchy', $data ?? [], null);
        $this->setIfExists('issue_types', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('landing_page_info', $data ?? [], null);
        $this->setIfExists('lead', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
        $this->setIfExists('project_category', $data ?? [], null);
        $this->setIfExists('project_type_key', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], null);
        $this->setIfExists('retention_till_date', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('simplified', $data ?? [], null);
        $this->setIfExists('style', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('versions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAssigneeTypeAllowableValues();
        if (!is_null($this->container['assignee_type']) && !in_array($this->container['assignee_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'assignee_type', must be one of '%s'",
                $this->container['assignee_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProjectTypeKeyAllowableValues();
        if (!is_null($this->container['project_type_key']) && !in_array($this->container['project_type_key'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'project_type_key', must be one of '%s'",
                $this->container['project_type_key'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStyleAllowableValues();
        if (!is_null($this->container['style']) && !in_array($this->container['style'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'style', must be one of '%s'",
                $this->container['style'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived Whether the project is archived.
     *
     * @return self
     */
    public function setArchived($archived)
    {

        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }

        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets archived_by
     *
     * @return \OpenAPI\Client\Model\ProjectArchivedBy|null
     */
    public function getArchivedBy()
    {
        return $this->container['archived_by'];
    }

    /**
     * Sets archived_by
     *
     * @param \OpenAPI\Client\Model\ProjectArchivedBy|null $archived_by archived_by
     *
     * @return self
     */
    public function setArchivedBy($archived_by)
    {

        if (is_null($archived_by)) {
            throw new \InvalidArgumentException('non-nullable archived_by cannot be null');
        }

        $this->container['archived_by'] = $archived_by;

        return $this;
    }

    /**
     * Gets archived_date
     *
     * @return \DateTime|null
     */
    public function getArchivedDate()
    {
        return $this->container['archived_date'];
    }

    /**
     * Sets archived_date
     *
     * @param \DateTime|null $archived_date The date when the project was archived.
     *
     * @return self
     */
    public function setArchivedDate($archived_date)
    {

        if (is_null($archived_date)) {
            throw new \InvalidArgumentException('non-nullable archived_date cannot be null');
        }

        $this->container['archived_date'] = $archived_date;

        return $this;
    }

    /**
     * Gets assignee_type
     *
     * @return string|null
     */
    public function getAssigneeType()
    {
        return $this->container['assignee_type'];
    }

    /**
     * Sets assignee_type
     *
     * @param string|null $assignee_type The default assignee when creating issues for this project.
     *
     * @return self
     */
    public function setAssigneeType($assignee_type)
    {
        $allowedValues = $this->getAssigneeTypeAllowableValues();
        if (!is_null($assignee_type) && !in_array($assignee_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'assignee_type', must be one of '%s'",
                    $assignee_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($assignee_type)) {
            throw new \InvalidArgumentException('non-nullable assignee_type cannot be null');
        }

        $this->container['assignee_type'] = $assignee_type;

        return $this;
    }

    /**
     * Gets avatar_urls
     *
     * @return \OpenAPI\Client\Model\ProjectAvatarUrls|null
     */
    public function getAvatarUrls()
    {
        return $this->container['avatar_urls'];
    }

    /**
     * Sets avatar_urls
     *
     * @param \OpenAPI\Client\Model\ProjectAvatarUrls|null $avatar_urls avatar_urls
     *
     * @return self
     */
    public function setAvatarUrls($avatar_urls)
    {

        if (is_null($avatar_urls)) {
            throw new \InvalidArgumentException('non-nullable avatar_urls cannot be null');
        }

        $this->container['avatar_urls'] = $avatar_urls;

        return $this;
    }

    /**
     * Gets components
     *
     * @return \OpenAPI\Client\Model\ProjectComponent[]|null
     */
    public function getComponents()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param \OpenAPI\Client\Model\ProjectComponent[]|null $components List of the components contained in the project.
     *
     * @return self
     */
    public function setComponents($components)
    {

        if (is_null($components)) {
            throw new \InvalidArgumentException('non-nullable components cannot be null');
        }

        $this->container['components'] = $components;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted Whether the project is marked as deleted.
     *
     * @return self
     */
    public function setDeleted($deleted)
    {

        if (is_null($deleted)) {
            throw new \InvalidArgumentException('non-nullable deleted cannot be null');
        }

        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets deleted_by
     *
     * @return \OpenAPI\Client\Model\ProjectDeletedBy|null
     */
    public function getDeletedBy()
    {
        return $this->container['deleted_by'];
    }

    /**
     * Sets deleted_by
     *
     * @param \OpenAPI\Client\Model\ProjectDeletedBy|null $deleted_by deleted_by
     *
     * @return self
     */
    public function setDeletedBy($deleted_by)
    {

        if (is_null($deleted_by)) {
            throw new \InvalidArgumentException('non-nullable deleted_by cannot be null');
        }

        $this->container['deleted_by'] = $deleted_by;

        return $this;
    }

    /**
     * Gets deleted_date
     *
     * @return \DateTime|null
     */
    public function getDeletedDate()
    {
        return $this->container['deleted_date'];
    }

    /**
     * Sets deleted_date
     *
     * @param \DateTime|null $deleted_date The date when the project was marked as deleted.
     *
     * @return self
     */
    public function setDeletedDate($deleted_date)
    {

        if (is_null($deleted_date)) {
            throw new \InvalidArgumentException('non-nullable deleted_date cannot be null');
        }

        $this->container['deleted_date'] = $deleted_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A brief description of the project.
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email An email address associated with the project.
     *
     * @return self
     */
    public function setEmail($email)
    {

        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets expand
     *
     * @return string|null
     */
    public function getExpand()
    {
        return $this->container['expand'];
    }

    /**
     * Sets expand
     *
     * @param string|null $expand Expand options that include additional project details in the response.
     *
     * @return self
     */
    public function setExpand($expand)
    {

        if (is_null($expand)) {
            throw new \InvalidArgumentException('non-nullable expand cannot be null');
        }

        $this->container['expand'] = $expand;

        return $this;
    }

    /**
     * Gets favourite
     *
     * @return bool|null
     */
    public function getFavourite()
    {
        return $this->container['favourite'];
    }

    /**
     * Sets favourite
     *
     * @param bool|null $favourite Whether the project is selected as a favorite.
     *
     * @return self
     */
    public function setFavourite($favourite)
    {

        if (is_null($favourite)) {
            throw new \InvalidArgumentException('non-nullable favourite cannot be null');
        }

        $this->container['favourite'] = $favourite;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of the project.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets insight
     *
     * @return \OpenAPI\Client\Model\ProjectInsight|null
     */
    public function getInsight()
    {
        return $this->container['insight'];
    }

    /**
     * Sets insight
     *
     * @param \OpenAPI\Client\Model\ProjectInsight|null $insight insight
     *
     * @return self
     */
    public function setInsight($insight)
    {

        if (is_null($insight)) {
            throw new \InvalidArgumentException('non-nullable insight cannot be null');
        }

        $this->container['insight'] = $insight;

        return $this;
    }

    /**
     * Gets is_private
     *
     * @return bool|null
     */
    public function getIsPrivate()
    {
        return $this->container['is_private'];
    }

    /**
     * Sets is_private
     *
     * @param bool|null $is_private Whether the project is private.
     *
     * @return self
     */
    public function setIsPrivate($is_private)
    {

        if (is_null($is_private)) {
            throw new \InvalidArgumentException('non-nullable is_private cannot be null');
        }

        $this->container['is_private'] = $is_private;

        return $this;
    }

    /**
     * Gets issue_type_hierarchy
     *
     * @return \OpenAPI\Client\Model\ProjectIssueTypeHierarchy|null
     */
    public function getIssueTypeHierarchy()
    {
        return $this->container['issue_type_hierarchy'];
    }

    /**
     * Sets issue_type_hierarchy
     *
     * @param \OpenAPI\Client\Model\ProjectIssueTypeHierarchy|null $issue_type_hierarchy issue_type_hierarchy
     *
     * @return self
     */
    public function setIssueTypeHierarchy($issue_type_hierarchy)
    {

        if (is_null($issue_type_hierarchy)) {
            throw new \InvalidArgumentException('non-nullable issue_type_hierarchy cannot be null');
        }

        $this->container['issue_type_hierarchy'] = $issue_type_hierarchy;

        return $this;
    }

    /**
     * Gets issue_types
     *
     * @return \OpenAPI\Client\Model\IssueTypeDetails[]|null
     */
    public function getIssueTypes()
    {
        return $this->container['issue_types'];
    }

    /**
     * Sets issue_types
     *
     * @param \OpenAPI\Client\Model\IssueTypeDetails[]|null $issue_types List of the issue types available in the project.
     *
     * @return self
     */
    public function setIssueTypes($issue_types)
    {

        if (is_null($issue_types)) {
            throw new \InvalidArgumentException('non-nullable issue_types cannot be null');
        }

        $this->container['issue_types'] = $issue_types;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key The key of the project.
     *
     * @return self
     */
    public function setKey($key)
    {

        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }

        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets landing_page_info
     *
     * @return \OpenAPI\Client\Model\ProjectLandingPageInfo|null
     */
    public function getLandingPageInfo()
    {
        return $this->container['landing_page_info'];
    }

    /**
     * Sets landing_page_info
     *
     * @param \OpenAPI\Client\Model\ProjectLandingPageInfo|null $landing_page_info landing_page_info
     *
     * @return self
     */
    public function setLandingPageInfo($landing_page_info)
    {

        if (is_null($landing_page_info)) {
            throw new \InvalidArgumentException('non-nullable landing_page_info cannot be null');
        }

        $this->container['landing_page_info'] = $landing_page_info;

        return $this;
    }

    /**
     * Gets lead
     *
     * @return \OpenAPI\Client\Model\ProjectLead|null
     */
    public function getLead()
    {
        return $this->container['lead'];
    }

    /**
     * Sets lead
     *
     * @param \OpenAPI\Client\Model\ProjectLead|null $lead lead
     *
     * @return self
     */
    public function setLead($lead)
    {

        if (is_null($lead)) {
            throw new \InvalidArgumentException('non-nullable lead cannot be null');
        }

        $this->container['lead'] = $lead;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the project.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \OpenAPI\Client\Model\ProjectPermissions|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \OpenAPI\Client\Model\ProjectPermissions|null $permissions permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {

        if (is_null($permissions)) {
            throw new \InvalidArgumentException('non-nullable permissions cannot be null');
        }

        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets project_category
     *
     * @return \OpenAPI\Client\Model\ProjectProjectCategory|null
     */
    public function getProjectCategory()
    {
        return $this->container['project_category'];
    }

    /**
     * Sets project_category
     *
     * @param \OpenAPI\Client\Model\ProjectProjectCategory|null $project_category project_category
     *
     * @return self
     */
    public function setProjectCategory($project_category)
    {

        if (is_null($project_category)) {
            throw new \InvalidArgumentException('non-nullable project_category cannot be null');
        }

        $this->container['project_category'] = $project_category;

        return $this;
    }

    /**
     * Gets project_type_key
     *
     * @return string|null
     */
    public function getProjectTypeKey()
    {
        return $this->container['project_type_key'];
    }

    /**
     * Sets project_type_key
     *
     * @param string|null $project_type_key The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
     *
     * @return self
     */
    public function setProjectTypeKey($project_type_key)
    {
        $allowedValues = $this->getProjectTypeKeyAllowableValues();
        if (!is_null($project_type_key) && !in_array($project_type_key, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'project_type_key', must be one of '%s'",
                    $project_type_key,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($project_type_key)) {
            throw new \InvalidArgumentException('non-nullable project_type_key cannot be null');
        }

        $this->container['project_type_key'] = $project_type_key;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return array<string,mixed>|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param array<string,mixed>|null $properties Map of project properties
     *
     * @return self
     */
    public function setProperties($properties)
    {

        if (is_null($properties)) {
            throw new \InvalidArgumentException('non-nullable properties cannot be null');
        }

        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets retention_till_date
     *
     * @return \DateTime|null
     */
    public function getRetentionTillDate()
    {
        return $this->container['retention_till_date'];
    }

    /**
     * Sets retention_till_date
     *
     * @param \DateTime|null $retention_till_date The date when the project is deleted permanently.
     *
     * @return self
     */
    public function setRetentionTillDate($retention_till_date)
    {

        if (is_null($retention_till_date)) {
            throw new \InvalidArgumentException('non-nullable retention_till_date cannot be null');
        }

        $this->container['retention_till_date'] = $retention_till_date;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return array<string,string>|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param array<string,string>|null $roles The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-2-role-post).
     *
     * @return self
     */
    public function setRoles($roles)
    {

        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }

        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string|null $self The URL of the project details.
     *
     * @return self
     */
    public function setSelf($self)
    {

        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }

        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets simplified
     *
     * @return bool|null
     */
    public function getSimplified()
    {
        return $this->container['simplified'];
    }

    /**
     * Sets simplified
     *
     * @param bool|null $simplified Whether the project is simplified.
     *
     * @return self
     */
    public function setSimplified($simplified)
    {

        if (is_null($simplified)) {
            throw new \InvalidArgumentException('non-nullable simplified cannot be null');
        }

        $this->container['simplified'] = $simplified;

        return $this;
    }

    /**
     * Gets style
     *
     * @return string|null
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param string|null $style The type of the project.
     *
     * @return self
     */
    public function setStyle($style)
    {
        $allowedValues = $this->getStyleAllowableValues();
        if (!is_null($style) && !in_array($style, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'style', must be one of '%s'",
                    $style,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($style)) {
            throw new \InvalidArgumentException('non-nullable style cannot be null');
        }

        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url A link to information about this project, such as project documentation.
     *
     * @return self
     */
    public function setUrl($url)
    {

        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid Unique ID for next-gen projects.
     *
     * @return self
     */
    public function setUuid($uuid)
    {

        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }

        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets versions
     *
     * @return \OpenAPI\Client\Model\Version[]|null
     */
    public function getVersions()
    {
        return $this->container['versions'];
    }

    /**
     * Sets versions
     *
     * @param \OpenAPI\Client\Model\Version[]|null $versions The versions defined in the project. For more information, see [Create version](#api-rest-api-2-version-post).
     *
     * @return self
     */
    public function setVersions($versions)
    {

        if (is_null($versions)) {
            throw new \InvalidArgumentException('non-nullable versions cannot be null');
        }

        $this->container['versions'] = $versions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


