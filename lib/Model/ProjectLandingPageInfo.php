<?php
/**
 * ProjectLandingPageInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProjectLandingPageInfo Class Doc Comment
 *
 * @category Class
 * @description The project landing page info.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProjectLandingPageInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Project_landingPageInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attributes' => 'array<string,string>',
        'board_id' => 'int',
        'board_name' => 'string',
        'project_key' => 'string',
        'project_type' => 'string',
        'queue_category' => 'string',
        'queue_id' => 'int',
        'queue_name' => 'string',
        'simple_board' => 'bool',
        'simplified' => 'bool',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'attributes' => null,
        'board_id' => 'int64',
        'board_name' => null,
        'project_key' => null,
        'project_type' => null,
        'queue_category' => null,
        'queue_id' => 'int64',
        'queue_name' => null,
        'simple_board' => null,
        'simplified' => null,
        'url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'attributes' => false,
		'board_id' => false,
		'board_name' => false,
		'project_key' => false,
		'project_type' => false,
		'queue_category' => false,
		'queue_id' => false,
		'queue_name' => false,
		'simple_board' => false,
		'simplified' => false,
		'url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attributes' => 'attributes',
        'board_id' => 'boardId',
        'board_name' => 'boardName',
        'project_key' => 'projectKey',
        'project_type' => 'projectType',
        'queue_category' => 'queueCategory',
        'queue_id' => 'queueId',
        'queue_name' => 'queueName',
        'simple_board' => 'simpleBoard',
        'simplified' => 'simplified',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attributes' => 'setAttributes',
        'board_id' => 'setBoardId',
        'board_name' => 'setBoardName',
        'project_key' => 'setProjectKey',
        'project_type' => 'setProjectType',
        'queue_category' => 'setQueueCategory',
        'queue_id' => 'setQueueId',
        'queue_name' => 'setQueueName',
        'simple_board' => 'setSimpleBoard',
        'simplified' => 'setSimplified',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attributes' => 'getAttributes',
        'board_id' => 'getBoardId',
        'board_name' => 'getBoardName',
        'project_key' => 'getProjectKey',
        'project_type' => 'getProjectType',
        'queue_category' => 'getQueueCategory',
        'queue_id' => 'getQueueId',
        'queue_name' => 'getQueueName',
        'simple_board' => 'getSimpleBoard',
        'simplified' => 'getSimplified',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('board_id', $data ?? [], null);
        $this->setIfExists('board_name', $data ?? [], null);
        $this->setIfExists('project_key', $data ?? [], null);
        $this->setIfExists('project_type', $data ?? [], null);
        $this->setIfExists('queue_category', $data ?? [], null);
        $this->setIfExists('queue_id', $data ?? [], null);
        $this->setIfExists('queue_name', $data ?? [], null);
        $this->setIfExists('simple_board', $data ?? [], null);
        $this->setIfExists('simplified', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attributes
     *
     * @return array<string,string>|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param array<string,string>|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {

        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }

        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets board_id
     *
     * @return int|null
     */
    public function getBoardId()
    {
        return $this->container['board_id'];
    }

    /**
     * Sets board_id
     *
     * @param int|null $board_id board_id
     *
     * @return self
     */
    public function setBoardId($board_id)
    {

        if (is_null($board_id)) {
            throw new \InvalidArgumentException('non-nullable board_id cannot be null');
        }

        $this->container['board_id'] = $board_id;

        return $this;
    }

    /**
     * Gets board_name
     *
     * @return string|null
     */
    public function getBoardName()
    {
        return $this->container['board_name'];
    }

    /**
     * Sets board_name
     *
     * @param string|null $board_name board_name
     *
     * @return self
     */
    public function setBoardName($board_name)
    {

        if (is_null($board_name)) {
            throw new \InvalidArgumentException('non-nullable board_name cannot be null');
        }

        $this->container['board_name'] = $board_name;

        return $this;
    }

    /**
     * Gets project_key
     *
     * @return string|null
     */
    public function getProjectKey()
    {
        return $this->container['project_key'];
    }

    /**
     * Sets project_key
     *
     * @param string|null $project_key project_key
     *
     * @return self
     */
    public function setProjectKey($project_key)
    {

        if (is_null($project_key)) {
            throw new \InvalidArgumentException('non-nullable project_key cannot be null');
        }

        $this->container['project_key'] = $project_key;

        return $this;
    }

    /**
     * Gets project_type
     *
     * @return string|null
     */
    public function getProjectType()
    {
        return $this->container['project_type'];
    }

    /**
     * Sets project_type
     *
     * @param string|null $project_type project_type
     *
     * @return self
     */
    public function setProjectType($project_type)
    {

        if (is_null($project_type)) {
            throw new \InvalidArgumentException('non-nullable project_type cannot be null');
        }

        $this->container['project_type'] = $project_type;

        return $this;
    }

    /**
     * Gets queue_category
     *
     * @return string|null
     */
    public function getQueueCategory()
    {
        return $this->container['queue_category'];
    }

    /**
     * Sets queue_category
     *
     * @param string|null $queue_category queue_category
     *
     * @return self
     */
    public function setQueueCategory($queue_category)
    {

        if (is_null($queue_category)) {
            throw new \InvalidArgumentException('non-nullable queue_category cannot be null');
        }

        $this->container['queue_category'] = $queue_category;

        return $this;
    }

    /**
     * Gets queue_id
     *
     * @return int|null
     */
    public function getQueueId()
    {
        return $this->container['queue_id'];
    }

    /**
     * Sets queue_id
     *
     * @param int|null $queue_id queue_id
     *
     * @return self
     */
    public function setQueueId($queue_id)
    {

        if (is_null($queue_id)) {
            throw new \InvalidArgumentException('non-nullable queue_id cannot be null');
        }

        $this->container['queue_id'] = $queue_id;

        return $this;
    }

    /**
     * Gets queue_name
     *
     * @return string|null
     */
    public function getQueueName()
    {
        return $this->container['queue_name'];
    }

    /**
     * Sets queue_name
     *
     * @param string|null $queue_name queue_name
     *
     * @return self
     */
    public function setQueueName($queue_name)
    {

        if (is_null($queue_name)) {
            throw new \InvalidArgumentException('non-nullable queue_name cannot be null');
        }

        $this->container['queue_name'] = $queue_name;

        return $this;
    }

    /**
     * Gets simple_board
     *
     * @return bool|null
     */
    public function getSimpleBoard()
    {
        return $this->container['simple_board'];
    }

    /**
     * Sets simple_board
     *
     * @param bool|null $simple_board simple_board
     *
     * @return self
     */
    public function setSimpleBoard($simple_board)
    {

        if (is_null($simple_board)) {
            throw new \InvalidArgumentException('non-nullable simple_board cannot be null');
        }

        $this->container['simple_board'] = $simple_board;

        return $this;
    }

    /**
     * Gets simplified
     *
     * @return bool|null
     */
    public function getSimplified()
    {
        return $this->container['simplified'];
    }

    /**
     * Sets simplified
     *
     * @param bool|null $simplified simplified
     *
     * @return self
     */
    public function setSimplified($simplified)
    {

        if (is_null($simplified)) {
            throw new \InvalidArgumentException('non-nullable simplified cannot be null');
        }

        $this->container['simplified'] = $simplified;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {

        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }

        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


