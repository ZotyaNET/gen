<?php
/**
 * DashboardGadgetSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DashboardGadgetSettings Class Doc Comment
 *
 * @category Class
 * @description Details of the settings for a dashboard gadget.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DashboardGadgetSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DashboardGadgetSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'color' => 'string',
        'ignore_uri_and_module_key_validation' => 'bool',
        'module_key' => 'string',
        'position' => '\OpenAPI\Client\Model\DashboardGadgetSettingsPosition',
        'title' => 'string',
        'uri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'color' => null,
        'ignore_uri_and_module_key_validation' => null,
        'module_key' => null,
        'position' => null,
        'title' => null,
        'uri' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'color' => false,
		'ignore_uri_and_module_key_validation' => false,
		'module_key' => false,
		'position' => false,
		'title' => false,
		'uri' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'color' => 'color',
        'ignore_uri_and_module_key_validation' => 'ignoreUriAndModuleKeyValidation',
        'module_key' => 'moduleKey',
        'position' => 'position',
        'title' => 'title',
        'uri' => 'uri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'color' => 'setColor',
        'ignore_uri_and_module_key_validation' => 'setIgnoreUriAndModuleKeyValidation',
        'module_key' => 'setModuleKey',
        'position' => 'setPosition',
        'title' => 'setTitle',
        'uri' => 'setUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'color' => 'getColor',
        'ignore_uri_and_module_key_validation' => 'getIgnoreUriAndModuleKeyValidation',
        'module_key' => 'getModuleKey',
        'position' => 'getPosition',
        'title' => 'getTitle',
        'uri' => 'getUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('ignore_uri_and_module_key_validation', $data ?? [], null);
        $this->setIfExists('module_key', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('uri', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
     *
     * @return self
     */
    public function setColor($color)
    {

        if (is_null($color)) {
            throw new \InvalidArgumentException('non-nullable color cannot be null');
        }

        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets ignore_uri_and_module_key_validation
     *
     * @return bool|null
     */
    public function getIgnoreUriAndModuleKeyValidation()
    {
        return $this->container['ignore_uri_and_module_key_validation'];
    }

    /**
     * Sets ignore_uri_and_module_key_validation
     *
     * @param bool|null $ignore_uri_and_module_key_validation Whether to ignore the validation of module key and URI. For example, when a gadget is created that is a part of an application that isn't installed.
     *
     * @return self
     */
    public function setIgnoreUriAndModuleKeyValidation($ignore_uri_and_module_key_validation)
    {

        if (is_null($ignore_uri_and_module_key_validation)) {
            throw new \InvalidArgumentException('non-nullable ignore_uri_and_module_key_validation cannot be null');
        }

        $this->container['ignore_uri_and_module_key_validation'] = $ignore_uri_and_module_key_validation;

        return $this;
    }

    /**
     * Gets module_key
     *
     * @return string|null
     */
    public function getModuleKey()
    {
        return $this->container['module_key'];
    }

    /**
     * Sets module_key
     *
     * @param string|null $module_key The module key of the gadget type. Can't be provided with `uri`.
     *
     * @return self
     */
    public function setModuleKey($module_key)
    {

        if (is_null($module_key)) {
            throw new \InvalidArgumentException('non-nullable module_key cannot be null');
        }

        $this->container['module_key'] = $module_key;

        return $this;
    }

    /**
     * Gets position
     *
     * @return \OpenAPI\Client\Model\DashboardGadgetSettingsPosition|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param \OpenAPI\Client\Model\DashboardGadgetSettingsPosition|null $position position
     *
     * @return self
     */
    public function setPosition($position)
    {

        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }

        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the gadget.
     *
     * @return self
     */
    public function setTitle($title)
    {

        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string|null
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string|null $uri The URI of the gadget type. Can't be provided with `moduleKey`.
     *
     * @return self
     */
    public function setUri($uri)
    {

        if (is_null($uri)) {
            throw new \InvalidArgumentException('non-nullable uri cannot be null');
        }

        $this->container['uri'] = $uri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


