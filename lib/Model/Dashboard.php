<?php
/**
 * Dashboard
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Dashboard Class Doc Comment
 *
 * @category Class
 * @description Details of a dashboard.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Dashboard implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Dashboard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'automatic_refresh_ms' => 'int',
        'description' => 'string',
        'edit_permissions' => '\OpenAPI\Client\Model\SharePermission[]',
        'id' => 'string',
        'is_favourite' => 'bool',
        'is_writable' => 'bool',
        'name' => 'string',
        'owner' => '\OpenAPI\Client\Model\DashboardOwner',
        'popularity' => 'int',
        'rank' => 'int',
        'self' => 'string',
        'share_permissions' => '\OpenAPI\Client\Model\SharePermission[]',
        'system_dashboard' => 'bool',
        'view' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'automatic_refresh_ms' => 'int32',
        'description' => null,
        'edit_permissions' => null,
        'id' => null,
        'is_favourite' => null,
        'is_writable' => null,
        'name' => null,
        'owner' => null,
        'popularity' => 'int64',
        'rank' => 'int32',
        'self' => 'uri',
        'share_permissions' => null,
        'system_dashboard' => null,
        'view' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'automatic_refresh_ms' => false,
		'description' => false,
		'edit_permissions' => false,
		'id' => false,
		'is_favourite' => false,
		'is_writable' => false,
		'name' => false,
		'owner' => false,
		'popularity' => false,
		'rank' => false,
		'self' => false,
		'share_permissions' => false,
		'system_dashboard' => false,
		'view' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'automatic_refresh_ms' => 'automaticRefreshMs',
        'description' => 'description',
        'edit_permissions' => 'editPermissions',
        'id' => 'id',
        'is_favourite' => 'isFavourite',
        'is_writable' => 'isWritable',
        'name' => 'name',
        'owner' => 'owner',
        'popularity' => 'popularity',
        'rank' => 'rank',
        'self' => 'self',
        'share_permissions' => 'sharePermissions',
        'system_dashboard' => 'systemDashboard',
        'view' => 'view'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'automatic_refresh_ms' => 'setAutomaticRefreshMs',
        'description' => 'setDescription',
        'edit_permissions' => 'setEditPermissions',
        'id' => 'setId',
        'is_favourite' => 'setIsFavourite',
        'is_writable' => 'setIsWritable',
        'name' => 'setName',
        'owner' => 'setOwner',
        'popularity' => 'setPopularity',
        'rank' => 'setRank',
        'self' => 'setSelf',
        'share_permissions' => 'setSharePermissions',
        'system_dashboard' => 'setSystemDashboard',
        'view' => 'setView'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'automatic_refresh_ms' => 'getAutomaticRefreshMs',
        'description' => 'getDescription',
        'edit_permissions' => 'getEditPermissions',
        'id' => 'getId',
        'is_favourite' => 'getIsFavourite',
        'is_writable' => 'getIsWritable',
        'name' => 'getName',
        'owner' => 'getOwner',
        'popularity' => 'getPopularity',
        'rank' => 'getRank',
        'self' => 'getSelf',
        'share_permissions' => 'getSharePermissions',
        'system_dashboard' => 'getSystemDashboard',
        'view' => 'getView'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('automatic_refresh_ms', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('edit_permissions', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_favourite', $data ?? [], null);
        $this->setIfExists('is_writable', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('popularity', $data ?? [], null);
        $this->setIfExists('rank', $data ?? [], null);
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('share_permissions', $data ?? [], null);
        $this->setIfExists('system_dashboard', $data ?? [], null);
        $this->setIfExists('view', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets automatic_refresh_ms
     *
     * @return int|null
     */
    public function getAutomaticRefreshMs()
    {
        return $this->container['automatic_refresh_ms'];
    }

    /**
     * Sets automatic_refresh_ms
     *
     * @param int|null $automatic_refresh_ms The automatic refresh interval for the dashboard in milliseconds.
     *
     * @return self
     */
    public function setAutomaticRefreshMs($automatic_refresh_ms)
    {

        if (is_null($automatic_refresh_ms)) {
            throw new \InvalidArgumentException('non-nullable automatic_refresh_ms cannot be null');
        }

        $this->container['automatic_refresh_ms'] = $automatic_refresh_ms;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets edit_permissions
     *
     * @return \OpenAPI\Client\Model\SharePermission[]|null
     */
    public function getEditPermissions()
    {
        return $this->container['edit_permissions'];
    }

    /**
     * Sets edit_permissions
     *
     * @param \OpenAPI\Client\Model\SharePermission[]|null $edit_permissions The details of any edit share permissions for the dashboard.
     *
     * @return self
     */
    public function setEditPermissions($edit_permissions)
    {

        if (is_null($edit_permissions)) {
            throw new \InvalidArgumentException('non-nullable edit_permissions cannot be null');
        }

        $this->container['edit_permissions'] = $edit_permissions;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of the dashboard.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_favourite
     *
     * @return bool|null
     */
    public function getIsFavourite()
    {
        return $this->container['is_favourite'];
    }

    /**
     * Sets is_favourite
     *
     * @param bool|null $is_favourite Whether the dashboard is selected as a favorite by the user.
     *
     * @return self
     */
    public function setIsFavourite($is_favourite)
    {

        if (is_null($is_favourite)) {
            throw new \InvalidArgumentException('non-nullable is_favourite cannot be null');
        }

        $this->container['is_favourite'] = $is_favourite;

        return $this;
    }

    /**
     * Gets is_writable
     *
     * @return bool|null
     */
    public function getIsWritable()
    {
        return $this->container['is_writable'];
    }

    /**
     * Sets is_writable
     *
     * @param bool|null $is_writable Whether the current user has permission to edit the dashboard.
     *
     * @return self
     */
    public function setIsWritable($is_writable)
    {

        if (is_null($is_writable)) {
            throw new \InvalidArgumentException('non-nullable is_writable cannot be null');
        }

        $this->container['is_writable'] = $is_writable;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the dashboard.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\DashboardOwner|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\DashboardOwner|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {

        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }

        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets popularity
     *
     * @return int|null
     */
    public function getPopularity()
    {
        return $this->container['popularity'];
    }

    /**
     * Sets popularity
     *
     * @param int|null $popularity The number of users who have this dashboard as a favorite.
     *
     * @return self
     */
    public function setPopularity($popularity)
    {

        if (is_null($popularity)) {
            throw new \InvalidArgumentException('non-nullable popularity cannot be null');
        }

        $this->container['popularity'] = $popularity;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return int|null
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param int|null $rank The rank of this dashboard.
     *
     * @return self
     */
    public function setRank($rank)
    {

        if (is_null($rank)) {
            throw new \InvalidArgumentException('non-nullable rank cannot be null');
        }

        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string|null $self The URL of these dashboard details.
     *
     * @return self
     */
    public function setSelf($self)
    {

        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }

        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets share_permissions
     *
     * @return \OpenAPI\Client\Model\SharePermission[]|null
     */
    public function getSharePermissions()
    {
        return $this->container['share_permissions'];
    }

    /**
     * Sets share_permissions
     *
     * @param \OpenAPI\Client\Model\SharePermission[]|null $share_permissions The details of any view share permissions for the dashboard.
     *
     * @return self
     */
    public function setSharePermissions($share_permissions)
    {

        if (is_null($share_permissions)) {
            throw new \InvalidArgumentException('non-nullable share_permissions cannot be null');
        }

        $this->container['share_permissions'] = $share_permissions;

        return $this;
    }

    /**
     * Gets system_dashboard
     *
     * @return bool|null
     */
    public function getSystemDashboard()
    {
        return $this->container['system_dashboard'];
    }

    /**
     * Sets system_dashboard
     *
     * @param bool|null $system_dashboard Whether the current dashboard is system dashboard.
     *
     * @return self
     */
    public function setSystemDashboard($system_dashboard)
    {

        if (is_null($system_dashboard)) {
            throw new \InvalidArgumentException('non-nullable system_dashboard cannot be null');
        }

        $this->container['system_dashboard'] = $system_dashboard;

        return $this;
    }

    /**
     * Gets view
     *
     * @return string|null
     */
    public function getView()
    {
        return $this->container['view'];
    }

    /**
     * Sets view
     *
     * @param string|null $view The URL of the dashboard.
     *
     * @return self
     */
    public function setView($view)
    {

        if (is_null($view)) {
            throw new \InvalidArgumentException('non-nullable view cannot be null');
        }

        $this->container['view'] = $view;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


