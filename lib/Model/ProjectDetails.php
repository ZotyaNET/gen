<?php
/**
 * ProjectDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProjectDetails Class Doc Comment
 *
 * @category Class
 * @description Details about a project.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProjectDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProjectDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'avatar_urls' => '\OpenAPI\Client\Model\ProjectAvatarUrls',
        'id' => 'string',
        'key' => 'string',
        'name' => 'string',
        'project_category' => '\OpenAPI\Client\Model\ProjectDetailsProjectCategory',
        'project_type_key' => 'string',
        'self' => 'string',
        'simplified' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'avatar_urls' => null,
        'id' => null,
        'key' => null,
        'name' => null,
        'project_category' => null,
        'project_type_key' => null,
        'self' => null,
        'simplified' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'avatar_urls' => false,
		'id' => false,
		'key' => false,
		'name' => false,
		'project_category' => false,
		'project_type_key' => false,
		'self' => false,
		'simplified' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'avatar_urls' => 'avatarUrls',
        'id' => 'id',
        'key' => 'key',
        'name' => 'name',
        'project_category' => 'projectCategory',
        'project_type_key' => 'projectTypeKey',
        'self' => 'self',
        'simplified' => 'simplified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'avatar_urls' => 'setAvatarUrls',
        'id' => 'setId',
        'key' => 'setKey',
        'name' => 'setName',
        'project_category' => 'setProjectCategory',
        'project_type_key' => 'setProjectTypeKey',
        'self' => 'setSelf',
        'simplified' => 'setSimplified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'avatar_urls' => 'getAvatarUrls',
        'id' => 'getId',
        'key' => 'getKey',
        'name' => 'getName',
        'project_category' => 'getProjectCategory',
        'project_type_key' => 'getProjectTypeKey',
        'self' => 'getSelf',
        'simplified' => 'getSimplified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PROJECT_TYPE_KEY_SOFTWARE = 'software';
    public const PROJECT_TYPE_KEY_SERVICE_DESK = 'service_desk';
    public const PROJECT_TYPE_KEY_BUSINESS = 'business';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProjectTypeKeyAllowableValues()
    {
        return [
            self::PROJECT_TYPE_KEY_SOFTWARE,
            self::PROJECT_TYPE_KEY_SERVICE_DESK,
            self::PROJECT_TYPE_KEY_BUSINESS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('avatar_urls', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('project_category', $data ?? [], null);
        $this->setIfExists('project_type_key', $data ?? [], null);
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('simplified', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProjectTypeKeyAllowableValues();
        if (!is_null($this->container['project_type_key']) && !in_array($this->container['project_type_key'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'project_type_key', must be one of '%s'",
                $this->container['project_type_key'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets avatar_urls
     *
     * @return \OpenAPI\Client\Model\ProjectAvatarUrls|null
     */
    public function getAvatarUrls()
    {
        return $this->container['avatar_urls'];
    }

    /**
     * Sets avatar_urls
     *
     * @param \OpenAPI\Client\Model\ProjectAvatarUrls|null $avatar_urls avatar_urls
     *
     * @return self
     */
    public function setAvatarUrls($avatar_urls)
    {

        if (is_null($avatar_urls)) {
            throw new \InvalidArgumentException('non-nullable avatar_urls cannot be null');
        }

        $this->container['avatar_urls'] = $avatar_urls;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of the project.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key The key of the project.
     *
     * @return self
     */
    public function setKey($key)
    {

        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }

        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the project.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets project_category
     *
     * @return \OpenAPI\Client\Model\ProjectDetailsProjectCategory|null
     */
    public function getProjectCategory()
    {
        return $this->container['project_category'];
    }

    /**
     * Sets project_category
     *
     * @param \OpenAPI\Client\Model\ProjectDetailsProjectCategory|null $project_category project_category
     *
     * @return self
     */
    public function setProjectCategory($project_category)
    {

        if (is_null($project_category)) {
            throw new \InvalidArgumentException('non-nullable project_category cannot be null');
        }

        $this->container['project_category'] = $project_category;

        return $this;
    }

    /**
     * Gets project_type_key
     *
     * @return string|null
     */
    public function getProjectTypeKey()
    {
        return $this->container['project_type_key'];
    }

    /**
     * Sets project_type_key
     *
     * @param string|null $project_type_key The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
     *
     * @return self
     */
    public function setProjectTypeKey($project_type_key)
    {
        $allowedValues = $this->getProjectTypeKeyAllowableValues();
        if (!is_null($project_type_key) && !in_array($project_type_key, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'project_type_key', must be one of '%s'",
                    $project_type_key,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($project_type_key)) {
            throw new \InvalidArgumentException('non-nullable project_type_key cannot be null');
        }

        $this->container['project_type_key'] = $project_type_key;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string|null $self The URL of the project details.
     *
     * @return self
     */
    public function setSelf($self)
    {

        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }

        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets simplified
     *
     * @return bool|null
     */
    public function getSimplified()
    {
        return $this->container['simplified'];
    }

    /**
     * Sets simplified
     *
     * @param bool|null $simplified Whether or not the project is simplified.
     *
     * @return self
     */
    public function setSimplified($simplified)
    {

        if (is_null($simplified)) {
            throw new \InvalidArgumentException('non-nullable simplified cannot be null');
        }

        $this->container['simplified'] = $simplified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


