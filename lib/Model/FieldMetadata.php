<?php
/**
 * FieldMetadata
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FieldMetadata Class Doc Comment
 *
 * @category Class
 * @description The metadata describing an issue field.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FieldMetadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FieldMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allowed_values' => 'mixed[]',
        'auto_complete_url' => 'string',
        'configuration' => 'array<string,mixed>',
        'default_value' => 'mixed',
        'has_default_value' => 'bool',
        'key' => 'string',
        'name' => 'string',
        'operations' => 'string[]',
        'required' => 'bool',
        'schema' => '\OpenAPI\Client\Model\FieldMetadataSchema'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allowed_values' => null,
        'auto_complete_url' => null,
        'configuration' => null,
        'default_value' => null,
        'has_default_value' => null,
        'key' => null,
        'name' => null,
        'operations' => null,
        'required' => null,
        'schema' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allowed_values' => false,
		'auto_complete_url' => false,
		'configuration' => false,
		'default_value' => true,
		'has_default_value' => false,
		'key' => false,
		'name' => false,
		'operations' => false,
		'required' => false,
		'schema' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowed_values' => 'allowedValues',
        'auto_complete_url' => 'autoCompleteUrl',
        'configuration' => 'configuration',
        'default_value' => 'defaultValue',
        'has_default_value' => 'hasDefaultValue',
        'key' => 'key',
        'name' => 'name',
        'operations' => 'operations',
        'required' => 'required',
        'schema' => 'schema'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowed_values' => 'setAllowedValues',
        'auto_complete_url' => 'setAutoCompleteUrl',
        'configuration' => 'setConfiguration',
        'default_value' => 'setDefaultValue',
        'has_default_value' => 'setHasDefaultValue',
        'key' => 'setKey',
        'name' => 'setName',
        'operations' => 'setOperations',
        'required' => 'setRequired',
        'schema' => 'setSchema'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowed_values' => 'getAllowedValues',
        'auto_complete_url' => 'getAutoCompleteUrl',
        'configuration' => 'getConfiguration',
        'default_value' => 'getDefaultValue',
        'has_default_value' => 'getHasDefaultValue',
        'key' => 'getKey',
        'name' => 'getName',
        'operations' => 'getOperations',
        'required' => 'getRequired',
        'schema' => 'getSchema'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('allowed_values', $data ?? [], null);
        $this->setIfExists('auto_complete_url', $data ?? [], null);
        $this->setIfExists('configuration', $data ?? [], null);
        $this->setIfExists('default_value', $data ?? [], null);
        $this->setIfExists('has_default_value', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('operations', $data ?? [], null);
        $this->setIfExists('required', $data ?? [], null);
        $this->setIfExists('schema', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['key'] === null) {
            $invalidProperties[] = "'key' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['operations'] === null) {
            $invalidProperties[] = "'operations' can't be null";
        }
        if ($this->container['required'] === null) {
            $invalidProperties[] = "'required' can't be null";
        }
        if ($this->container['schema'] === null) {
            $invalidProperties[] = "'schema' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowed_values
     *
     * @return mixed[]|null
     */
    public function getAllowedValues()
    {
        return $this->container['allowed_values'];
    }

    /**
     * Sets allowed_values
     *
     * @param mixed[]|null $allowed_values The list of values allowed in the field.
     *
     * @return self
     */
    public function setAllowedValues($allowed_values)
    {

        if (is_null($allowed_values)) {
            throw new \InvalidArgumentException('non-nullable allowed_values cannot be null');
        }

        $this->container['allowed_values'] = $allowed_values;

        return $this;
    }

    /**
     * Gets auto_complete_url
     *
     * @return string|null
     */
    public function getAutoCompleteUrl()
    {
        return $this->container['auto_complete_url'];
    }

    /**
     * Sets auto_complete_url
     *
     * @param string|null $auto_complete_url The URL that can be used to automatically complete the field.
     *
     * @return self
     */
    public function setAutoCompleteUrl($auto_complete_url)
    {

        if (is_null($auto_complete_url)) {
            throw new \InvalidArgumentException('non-nullable auto_complete_url cannot be null');
        }

        $this->container['auto_complete_url'] = $auto_complete_url;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return array<string,mixed>|null
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param array<string,mixed>|null $configuration The configuration properties.
     *
     * @return self
     */
    public function setConfiguration($configuration)
    {

        if (is_null($configuration)) {
            throw new \InvalidArgumentException('non-nullable configuration cannot be null');
        }

        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets default_value
     *
     * @return mixed|null
     */
    public function getDefaultValue()
    {
        return $this->container['default_value'];
    }

    /**
     * Sets default_value
     *
     * @param mixed|null $default_value The default value of the field.
     *
     * @return self
     */
    public function setDefaultValue($default_value)
    {

        if (is_null($default_value)) {
            array_push($this->openAPINullablesSetToNull, 'default_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['default_value'] = $default_value;

        return $this;
    }

    /**
     * Gets has_default_value
     *
     * @return bool|null
     */
    public function getHasDefaultValue()
    {
        return $this->container['has_default_value'];
    }

    /**
     * Sets has_default_value
     *
     * @param bool|null $has_default_value Whether the field has a default value.
     *
     * @return self
     */
    public function setHasDefaultValue($has_default_value)
    {

        if (is_null($has_default_value)) {
            throw new \InvalidArgumentException('non-nullable has_default_value cannot be null');
        }

        $this->container['has_default_value'] = $has_default_value;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key The key of the field.
     *
     * @return self
     */
    public function setKey($key)
    {

        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }

        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the field.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets operations
     *
     * @return string[]
     */
    public function getOperations()
    {
        return $this->container['operations'];
    }

    /**
     * Sets operations
     *
     * @param string[] $operations The list of operations that can be performed on the field.
     *
     * @return self
     */
    public function setOperations($operations)
    {

        if (is_null($operations)) {
            throw new \InvalidArgumentException('non-nullable operations cannot be null');
        }

        $this->container['operations'] = $operations;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool $required Whether the field is required.
     *
     * @return self
     */
    public function setRequired($required)
    {

        if (is_null($required)) {
            throw new \InvalidArgumentException('non-nullable required cannot be null');
        }

        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets schema
     *
     * @return \OpenAPI\Client\Model\FieldMetadataSchema
     */
    public function getSchema()
    {
        return $this->container['schema'];
    }

    /**
     * Sets schema
     *
     * @param \OpenAPI\Client\Model\FieldMetadataSchema $schema schema
     *
     * @return self
     */
    public function setSchema($schema)
    {

        if (is_null($schema)) {
            throw new \InvalidArgumentException('non-nullable schema cannot be null');
        }

        $this->container['schema'] = $schema;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


