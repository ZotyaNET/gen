<?php
/**
 * FieldDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FieldDetails Class Doc Comment
 *
 * @category Class
 * @description Details about a field.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FieldDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FieldDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'clause_names' => 'string[]',
        'custom' => 'bool',
        'id' => 'string',
        'key' => 'string',
        'name' => 'string',
        'navigable' => 'bool',
        'orderable' => 'bool',
        'schema' => '\OpenAPI\Client\Model\FieldDetailsSchema',
        'scope' => '\OpenAPI\Client\Model\FieldDetailsScope',
        'searchable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'clause_names' => null,
        'custom' => null,
        'id' => null,
        'key' => null,
        'name' => null,
        'navigable' => null,
        'orderable' => null,
        'schema' => null,
        'scope' => null,
        'searchable' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'clause_names' => false,
		'custom' => false,
		'id' => false,
		'key' => false,
		'name' => false,
		'navigable' => false,
		'orderable' => false,
		'schema' => false,
		'scope' => false,
		'searchable' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clause_names' => 'clauseNames',
        'custom' => 'custom',
        'id' => 'id',
        'key' => 'key',
        'name' => 'name',
        'navigable' => 'navigable',
        'orderable' => 'orderable',
        'schema' => 'schema',
        'scope' => 'scope',
        'searchable' => 'searchable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clause_names' => 'setClauseNames',
        'custom' => 'setCustom',
        'id' => 'setId',
        'key' => 'setKey',
        'name' => 'setName',
        'navigable' => 'setNavigable',
        'orderable' => 'setOrderable',
        'schema' => 'setSchema',
        'scope' => 'setScope',
        'searchable' => 'setSearchable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clause_names' => 'getClauseNames',
        'custom' => 'getCustom',
        'id' => 'getId',
        'key' => 'getKey',
        'name' => 'getName',
        'navigable' => 'getNavigable',
        'orderable' => 'getOrderable',
        'schema' => 'getSchema',
        'scope' => 'getScope',
        'searchable' => 'getSearchable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('clause_names', $data ?? [], null);
        $this->setIfExists('custom', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('navigable', $data ?? [], null);
        $this->setIfExists('orderable', $data ?? [], null);
        $this->setIfExists('schema', $data ?? [], null);
        $this->setIfExists('scope', $data ?? [], null);
        $this->setIfExists('searchable', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clause_names
     *
     * @return string[]|null
     */
    public function getClauseNames()
    {
        return $this->container['clause_names'];
    }

    /**
     * Sets clause_names
     *
     * @param string[]|null $clause_names The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).
     *
     * @return self
     */
    public function setClauseNames($clause_names)
    {



        if (is_null($clause_names)) {
            throw new \InvalidArgumentException('non-nullable clause_names cannot be null');
        }

        $this->container['clause_names'] = $clause_names;

        return $this;
    }

    /**
     * Gets custom
     *
     * @return bool|null
     */
    public function getCustom()
    {
        return $this->container['custom'];
    }

    /**
     * Sets custom
     *
     * @param bool|null $custom Whether the field is a custom field.
     *
     * @return self
     */
    public function setCustom($custom)
    {

        if (is_null($custom)) {
            throw new \InvalidArgumentException('non-nullable custom cannot be null');
        }

        $this->container['custom'] = $custom;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of the field.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key The key of the field.
     *
     * @return self
     */
    public function setKey($key)
    {

        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }

        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the field.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets navigable
     *
     * @return bool|null
     */
    public function getNavigable()
    {
        return $this->container['navigable'];
    }

    /**
     * Sets navigable
     *
     * @param bool|null $navigable Whether the field can be used as a column on the issue navigator.
     *
     * @return self
     */
    public function setNavigable($navigable)
    {

        if (is_null($navigable)) {
            throw new \InvalidArgumentException('non-nullable navigable cannot be null');
        }

        $this->container['navigable'] = $navigable;

        return $this;
    }

    /**
     * Gets orderable
     *
     * @return bool|null
     */
    public function getOrderable()
    {
        return $this->container['orderable'];
    }

    /**
     * Sets orderable
     *
     * @param bool|null $orderable Whether the content of the field can be used to order lists.
     *
     * @return self
     */
    public function setOrderable($orderable)
    {

        if (is_null($orderable)) {
            throw new \InvalidArgumentException('non-nullable orderable cannot be null');
        }

        $this->container['orderable'] = $orderable;

        return $this;
    }

    /**
     * Gets schema
     *
     * @return \OpenAPI\Client\Model\FieldDetailsSchema|null
     */
    public function getSchema()
    {
        return $this->container['schema'];
    }

    /**
     * Sets schema
     *
     * @param \OpenAPI\Client\Model\FieldDetailsSchema|null $schema schema
     *
     * @return self
     */
    public function setSchema($schema)
    {

        if (is_null($schema)) {
            throw new \InvalidArgumentException('non-nullable schema cannot be null');
        }

        $this->container['schema'] = $schema;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return \OpenAPI\Client\Model\FieldDetailsScope|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param \OpenAPI\Client\Model\FieldDetailsScope|null $scope scope
     *
     * @return self
     */
    public function setScope($scope)
    {

        if (is_null($scope)) {
            throw new \InvalidArgumentException('non-nullable scope cannot be null');
        }

        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets searchable
     *
     * @return bool|null
     */
    public function getSearchable()
    {
        return $this->container['searchable'];
    }

    /**
     * Sets searchable
     *
     * @param bool|null $searchable Whether the content of the field can be searched.
     *
     * @return self
     */
    public function setSearchable($searchable)
    {

        if (is_null($searchable)) {
            throw new \InvalidArgumentException('non-nullable searchable cannot be null');
        }

        $this->container['searchable'] = $searchable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


