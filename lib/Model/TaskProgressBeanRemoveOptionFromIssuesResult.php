<?php
/**
 * TaskProgressBeanRemoveOptionFromIssuesResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TaskProgressBeanRemoveOptionFromIssuesResult Class Doc Comment
 *
 * @category Class
 * @description Details about a task.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TaskProgressBeanRemoveOptionFromIssuesResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaskProgressBeanRemoveOptionFromIssuesResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'elapsed_runtime' => 'int',
        'finished' => 'int',
        'id' => 'string',
        'last_update' => 'int',
        'message' => 'string',
        'progress' => 'int',
        'result' => '\OpenAPI\Client\Model\TaskProgressBeanRemoveOptionFromIssuesResultResult',
        'self' => 'string',
        'started' => 'int',
        'status' => 'string',
        'submitted' => 'int',
        'submitted_by' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'elapsed_runtime' => 'int64',
        'finished' => 'int64',
        'id' => null,
        'last_update' => 'int64',
        'message' => null,
        'progress' => 'int64',
        'result' => null,
        'self' => 'uri',
        'started' => 'int64',
        'status' => null,
        'submitted' => 'int64',
        'submitted_by' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
		'elapsed_runtime' => false,
		'finished' => false,
		'id' => false,
		'last_update' => false,
		'message' => false,
		'progress' => false,
		'result' => false,
		'self' => false,
		'started' => false,
		'status' => false,
		'submitted' => false,
		'submitted_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'elapsed_runtime' => 'elapsedRuntime',
        'finished' => 'finished',
        'id' => 'id',
        'last_update' => 'lastUpdate',
        'message' => 'message',
        'progress' => 'progress',
        'result' => 'result',
        'self' => 'self',
        'started' => 'started',
        'status' => 'status',
        'submitted' => 'submitted',
        'submitted_by' => 'submittedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'elapsed_runtime' => 'setElapsedRuntime',
        'finished' => 'setFinished',
        'id' => 'setId',
        'last_update' => 'setLastUpdate',
        'message' => 'setMessage',
        'progress' => 'setProgress',
        'result' => 'setResult',
        'self' => 'setSelf',
        'started' => 'setStarted',
        'status' => 'setStatus',
        'submitted' => 'setSubmitted',
        'submitted_by' => 'setSubmittedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'elapsed_runtime' => 'getElapsedRuntime',
        'finished' => 'getFinished',
        'id' => 'getId',
        'last_update' => 'getLastUpdate',
        'message' => 'getMessage',
        'progress' => 'getProgress',
        'result' => 'getResult',
        'self' => 'getSelf',
        'started' => 'getStarted',
        'status' => 'getStatus',
        'submitted' => 'getSubmitted',
        'submitted_by' => 'getSubmittedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_ENQUEUED = 'ENQUEUED';
    public const STATUS_RUNNING = 'RUNNING';
    public const STATUS_COMPLETE = 'COMPLETE';
    public const STATUS_FAILED = 'FAILED';
    public const STATUS_CANCEL_REQUESTED = 'CANCEL_REQUESTED';
    public const STATUS_CANCELLED = 'CANCELLED';
    public const STATUS_DEAD = 'DEAD';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENQUEUED,
            self::STATUS_RUNNING,
            self::STATUS_COMPLETE,
            self::STATUS_FAILED,
            self::STATUS_CANCEL_REQUESTED,
            self::STATUS_CANCELLED,
            self::STATUS_DEAD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('elapsed_runtime', $data ?? [], null);
        $this->setIfExists('finished', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('last_update', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('progress', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('started', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('submitted', $data ?? [], null);
        $this->setIfExists('submitted_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['elapsed_runtime'] === null) {
            $invalidProperties[] = "'elapsed_runtime' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['last_update'] === null) {
            $invalidProperties[] = "'last_update' can't be null";
        }
        if ($this->container['progress'] === null) {
            $invalidProperties[] = "'progress' can't be null";
        }
        if ($this->container['self'] === null) {
            $invalidProperties[] = "'self' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['submitted'] === null) {
            $invalidProperties[] = "'submitted' can't be null";
        }
        if ($this->container['submitted_by'] === null) {
            $invalidProperties[] = "'submitted_by' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the task.
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets elapsed_runtime
     *
     * @return int
     */
    public function getElapsedRuntime()
    {
        return $this->container['elapsed_runtime'];
    }

    /**
     * Sets elapsed_runtime
     *
     * @param int $elapsed_runtime The execution time of the task, in milliseconds.
     *
     * @return self
     */
    public function setElapsedRuntime($elapsed_runtime)
    {

        if (is_null($elapsed_runtime)) {
            throw new \InvalidArgumentException('non-nullable elapsed_runtime cannot be null');
        }

        $this->container['elapsed_runtime'] = $elapsed_runtime;

        return $this;
    }

    /**
     * Gets finished
     *
     * @return int|null
     */
    public function getFinished()
    {
        return $this->container['finished'];
    }

    /**
     * Sets finished
     *
     * @param int|null $finished A timestamp recording when the task was finished.
     *
     * @return self
     */
    public function setFinished($finished)
    {

        if (is_null($finished)) {
            throw new \InvalidArgumentException('non-nullable finished cannot be null');
        }

        $this->container['finished'] = $finished;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID of the task.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return int
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param int $last_update A timestamp recording when the task progress was last updated.
     *
     * @return self
     */
    public function setLastUpdate($last_update)
    {

        if (is_null($last_update)) {
            throw new \InvalidArgumentException('non-nullable last_update cannot be null');
        }

        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message Information about the progress of the task.
     *
     * @return self
     */
    public function setMessage($message)
    {

        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }

        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return int
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param int $progress The progress of the task, as a percentage complete.
     *
     * @return self
     */
    public function setProgress($progress)
    {

        if (is_null($progress)) {
            throw new \InvalidArgumentException('non-nullable progress cannot be null');
        }

        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets result
     *
     * @return \OpenAPI\Client\Model\TaskProgressBeanRemoveOptionFromIssuesResultResult|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param \OpenAPI\Client\Model\TaskProgressBeanRemoveOptionFromIssuesResultResult|null $result result
     *
     * @return self
     */
    public function setResult($result)
    {

        if (is_null($result)) {
            throw new \InvalidArgumentException('non-nullable result cannot be null');
        }

        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string $self The URL of the task.
     *
     * @return self
     */
    public function setSelf($self)
    {

        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }

        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets started
     *
     * @return int|null
     */
    public function getStarted()
    {
        return $this->container['started'];
    }

    /**
     * Sets started
     *
     * @param int|null $started A timestamp recording when the task was started.
     *
     * @return self
     */
    public function setStarted($started)
    {

        if (is_null($started)) {
            throw new \InvalidArgumentException('non-nullable started cannot be null');
        }

        $this->container['started'] = $started;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the task.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets submitted
     *
     * @return int
     */
    public function getSubmitted()
    {
        return $this->container['submitted'];
    }

    /**
     * Sets submitted
     *
     * @param int $submitted A timestamp recording when the task was submitted.
     *
     * @return self
     */
    public function setSubmitted($submitted)
    {

        if (is_null($submitted)) {
            throw new \InvalidArgumentException('non-nullable submitted cannot be null');
        }

        $this->container['submitted'] = $submitted;

        return $this;
    }

    /**
     * Gets submitted_by
     *
     * @return int
     */
    public function getSubmittedBy()
    {
        return $this->container['submitted_by'];
    }

    /**
     * Sets submitted_by
     *
     * @param int $submitted_by The ID of the user who submitted the task.
     *
     * @return self
     */
    public function setSubmittedBy($submitted_by)
    {

        if (is_null($submitted_by)) {
            throw new \InvalidArgumentException('non-nullable submitted_by cannot be null');
        }

        $this->container['submitted_by'] = $submitted_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


